var rs = {
	settings: {
		cookieLifetime: 360000000,	//Value on how long the cookie should survive. 
		defaultSpeedValue: 100,	//Default speed, slow will be -25 and fast will be +25 from this value.
		defaultSpeed: 'medium',	//Defauly speed, this will be selected if no cookie is found.
		defaultSync: 'wordsent',	//Default sync, this will be selected if no cookie is found.
		defaultPopup: 'iconon',
		reloadPage: false,		//Should the page reload when the player is closed? true/false
		sentColor: '#beffd6',	//Color to be used for sentence highlighting. Default: #beffd6
		textColor: '#000000',	//Color to be used for the text when highlighting. Default: #000000
		useCloudService: false, 
		usePopupButton: true,	//Use the pop-up button? true/false
		usePopupPlayer: true,	//Use the pop-up player? true/false
		useReadspeakerIcon: false,	//Use the default ReadSpeaker icon instead of the implemented listen button? true/false	
		usePost: false,	//Use POST to send the text content to our servers? true/false		
		wordColor: '#a4cbff',	//Color to be used for word highlighting. Default: #a4cbff
		appserverhost: 'app.readspeaker.com',
		domain: 'readspeaker.com',
		subdomain: 'app',
		region: '.eu',
		rscall: null,
		onclick: 'readpage(this.href,"rs_popup_player"); return false;',
		protocol: document.location.protocol || "http:",	//Use a specific protocol instead of http.
		rsent: 'rsent',	//rsent to be used
		version: '1.1c-embhl',	//Version of this script
		flash: {
			allowScriptAccess: 'always',	//Set the flash param 'allowScriptAccess'
			height: '20',	//Flash player height
			params: '&autoplay=1&rskin=bump&time_format=ms',	//Parameters used by the ReadSpeaker flash player
			popupHeight: '20',	//Pop-up flash player height
			popupWidth: '60',	//Pop-up flash player width			
			width: '250'	//Flash player width			
		},		
		imageSrc: {
			cloud: {
				arrowSrc: '/graphic/default/images/rs_embhl_arrow_small.gif',
				closeSrc: '/graphic/default/images/rs_player_close_13px.png',
				flashSrc: '/flash/readspeaker.swf',	//Link to where the flash player is hosted
				popupSrc: '/graphic/default/buttons/icon_16px.gif',
				settingsSrc: '/graphic/default/images/rs_embhl_wrench_13px.png',
				playSrc: '/graphic/default/images/rs_player_play_13px.png',
				playInactiveSrc: '/graphic/default/images/rs_player_play_inactive_13px.png',
				pauseSrc: '/graphic/default/images/rs_player_pause_13px.png',
				pauseInactiveSrc: '/graphic/default/images/rs_player_pause_inactive_13px.png',
				stopSrc: '/graphic/default/images/rs_player_stop_13px.png',
				stopInactiveSrc: '/graphic/default/images/rs_player_stop_inactive_13px.png',
				iconSrc: '/graphic/default/images/rs_player_icon_16px.gif'
			},
			media: {
				arrowSrc: '/images/enterprise/default/rs_arrow.gif',
				closeSrc: '/images/enterprise/default/close.png',
				flashSrc: '/flash/readspeaker20.swf',	//Link to where the flash player is hosted
				popupSrc: '/images/buttons/listen_icons/icon_16px.gif',
				settingsSrc: '/images/enterprise/default/wrench.png',
				playSrc: '/images/enterprise/default/play.png',
				playInactiveSrc: '/images/enterprise/default/play2.png',
				pauseSrc: '/images/enterprise/default/pause.png',
				pauseInactiveSrc: '/images/enterprise/default/pause2.png',
				stopSrc: '/images/enterprise/default/stop.png',
				stopInactiveSrc: '/images/enterprise/default/stop2.png',
				iconSrc: '/images/buttons/listen_icons/icon_16px.gif'
			}
		}		
	},
	vars: {
		thespeed: 100,
		thesync: 'none',
		newhtml: '',		
		restoreHTML: [],
		readID: [],
		currentRestoreHTML: null,
		currentReadID: null,
		currentPlayerID: null,
		previousPlayerID: null,
		previousSync: null,

		STATE: {
			CURRENT: 0,
			NOT_READY: 0,
			READY: 1,
			PLAYING: 2,
			CLOSE: 3,
			USER_SELECTION: 4,
			PLAYING_NO_SELECTION: 5,
			PLAYING_USER_SELECTION: 6,
			SETTINGS_CHANGED_PLAYING_NO_SELECTION: 7,
			SETTINGS_CHANGED_PLAYING_USER_SELECTION: 8,
			USER_SELECTION_WHILE_PLAYING_NO_SELECTION: 9,
			USER_SELECTION_WHILE_PLAYING_USER_SELECTION: 10				
		},
		sel: {
			selectedString: '',	//The selection made by the user
			selhtml: '',	//Store the marked up selection
			selectedRange: null,
			selectedWordsRange: [],	//Used by IE			
			bmindex: 1,
			sentbmindex: 0,
			seltexttimes: 0,
			startofsentence: 1,
			inc: 0,
			startNode: null,
			endNode: null,
			startOffset: null,
			endOffset: null,
			firstrun: 1,
			globalcount: null,
			oldwordhl_FF:		[],
			oldwordhlclass_FF:	[],
			oldsenthl_FF:		[],
			oldsenthlclass_FF:	[],		
			oldwordhlrange_IE:	[],
			oldwordhlbackcol_IE: [],
			oldwordhlforecol_IE: [],	
			oldwordhl_IE:		[],	
			oldwordhlclass_IE:	[],	
			oldsenthlrange_IE:	[],
			oldsenthlbackcol_IE: [],
			oldsenthlforecol_IE: [],	
			oldsenthl_IE:		[],
			oldsenthlclass_IE:	[],
			exludednodes: ["table","tr","select","option","textarea","ul","ol","dl","thead","tbody","tfoot","colgroup","script","map","optgroup"]
		}
	},	
	data: {
		params: null,
		images: null,
		userAgent: null,
		phrases: {
			closeplayer: "Close Player",
			fast: "Fast",
			hide: "Hide",
			highlightingoptions: "Highlighting options",
			listentoselectedtext: "Listen to selected text",
			medium: "Medium",
			nohighlighting: "No highlighting",
			nosound: "No sound?",
			pause: "Pause",
			playerwidth: "310",
			play: "Play",
			popupbutton: "Pop up button",
			sentonly: "Sentence only",
			settings: "Settings",
			show: "Show",
			slow: "Slow",
			speechenabled: "Speech enabled by <a href='http://www.readspeaker.com/?ref="+encodeURIComponent(document.location.href)+"' target='_blank'>ReadSpeaker</a>",
			speed: "Speed",
			stop: "Stop",
			volume: "Volume",
			wordonly: "Word only",
			wordsent: "Word and sentence"
		},

		setParams: function(rscall) {
			var params = {};
			var param = '';
			var key = '';
			var value = '';
			var querySplit = rscall.split('?');
			var paramSplit = querySplit[1].split(/[;&]/);
			
			for (var i = 0; i < paramSplit.length; i++) {
				param = paramSplit[i].split('=');
				if (! param || param.length != 2) {continue;}
				key = unescape(param[0]);
				value = unescape(param[1]);
				value = value.replace(/\+/g, ' ');
				if (key == 'url') {
					if(value.length==0) {
						value = document.location.href;
					}
					value = encodeURIComponent(value);
				}
				params[key] = value;
			}
			params['rsjs_ver'] = rs.settings.version;
			
			this.params = params;
		},
		
		setImages: function() {
			var images= {};
			var prefix = '';
			var region = rs.settings.region || '.eu';
			var host = (rs.settings.useCloudService && rs.settings.protocol!='https') ? 'cloud' : 'media';
			var library = rs.settings.imageSrc[host];
			
			for (var i in library) {
				if (library.hasOwnProperty(i)) {
					if (library[i].indexOf('://')!=-1) {
						prefix='';
					}
					else if (host=='cloud') {
						prefix='http://f1'+region+'.readspeaker.com';
					}
					else {
						prefix=rs.settings.protocol+'//media.readspeaker.com';
					}
					images[i]=prefix+library[i];
				}
			}
			this.images = images;
		},
		
		setUserAgent: function() {
			if (document.selection) {
				this.userAgent = "IE";
			} else if ((navigator.userAgent.toLowerCase().indexOf('iphone') > -1 || navigator.userAgent.toLowerCase().indexOf('ipad') > -1 || navigator.userAgent.toLowerCase().indexOf('ipod') > -1) && navigator.vendor.toLowerCase().indexOf('apple') > -1) {
				this.userAgent = "IOS";
				rs.settings.usePopupButton = false;
			} else if(navigator.userAgent.toLowerCase().indexOf('android') > -1) {
				if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
					this.userAgent = "IOS";
				}
				rs.settings.usePopupButton = false;
			} else {
				this.userAgent = "OTHER";
			}
		},
		
		getImage: function(key) {
			return (this.images && this.images[key] && this.images[key]!==undefined) ? this.images[key] : '';
		},
		
		getParam: function(key) {
			return (this.params && this.params[key] && this.params[key]!==undefined) ? this.params[key] : null;
		},		
		
		getParams: function() {
			return this.params;
		},
		
		getPhrase: function(key) {
			return (this.phrases && this.phrases[key] && this.phrases[key]!==undefined) ? this.phrases[key] : '';
		},
		
		getRSCall: function(additionalParams) {
			var addParams = additionalParams || {};
			var rscall = rs.settings.protocol + '//' + rs.settings.appserverhost + '/cgi-bin/' + rs.settings.rsent + '?';
			var params = {};
			for (var key in this.params) {
				if(this.params.hasOwnProperty(key) == false)
					continue;
				if(key == 'customerid') {
					rscall += key + '=' + this.params[key];
				} else {
					params[key] = this.params[key];
				}
			}
			for (var key in addParams) {
				if(addParams.hasOwnProperty(key) == false)
					continue;
					params[key] = addParams[key];
			}
			
			for(var key in params) {
				if(params.hasOwnProperty(key) == false)
					continue;
				if(key == 'customerid') {
					rscall += key + '=' + params[key];
				} else {
					rscall += '&' + key + '=' + params[key];
				}
			}
			return rscall;
		},
		
		getUserAgent: function() {
			return this.userAgent;
		}
	},
	
	init: function(rscall) {
		if (rs.vars.STATE.CURRENT != rs.vars.STATE.NOT_READY) {
			rs.data.setParams(rscall);
			return;
		}
		rs.data.setUserAgent();
		rs.getRsentInfo();
		rs.data.setImages();
		rs.createStylesheet();
		rs.vars.STATE.CURRENT = rs.vars.STATE.READY;
	},

	getRsentInfo: function() {
		var pattern = new RegExp(".+://"+rs.settings.subdomain+"\(.[a-z]{2})?\."+rs.settings.domain+".+", "i");
		var tmp_all_links = document.getElementsByTagName("A");	//Search for all elements that is a link
		var all_links = [];
		var region="";
		for (var j=0;j<tmp_all_links.length;j++)
			all_links[j] = tmp_all_links[j];	//Copy the result into an Array since the getElementsByTagName will update when a new A is added by this script.
		
		for(var k=0;k<all_links.length;k++) {
			if (all_links[k].getAttribute('href') && pattern.test(all_links[k].getAttribute('href')) && all_links[k].id != 'rsSaveBtn') {
				if (all_links[k].getAttribute('href').replace(pattern,"$1").length>0) {
					region = all_links[k].getAttribute('href').replace(pattern,"$1");
				} else {
					region = "";
				}
				rs.popup.buttonExists = true;
				if (!rs.settings.useReadspeakerIcon && all_links[k].getElementsByTagName('img')[0] && all_links[k].getElementsByTagName('img')[0].src && all_links[k].getElementsByTagName('img')[0].src.length > 0)
					rs.settings.imageSrc.popupSrc = all_links[k].getElementsByTagName('img')[0].src;						
				rs.settings.rscall = all_links[k].getAttribute('href');
				for(var i = 0; i < all_links[k].attributes.length; i++ ) {
					if ((all_links[k].attributes[i].nodeName.toLowerCase() == 'onclick' && all_links[k].attributes[i].nodeValue.length>0 && rs.settings.usePopupPlayer==false) || rs.data.getUserAgent()=='IOS') {
						rs.settings.onclick = all_links[k].attributes[i].nodeValue;	
					}
				}
				break;
			}
		}
		
		rs.settings.appserverhost=rs.settings.subdomain+region+'.'+rs.settings.domain;
		
		rs.settings.region=region;
		if (rs.settings.useCloudService) {
			rs.imagehost='f1'+rs.settings.region+'.'+rs.settings.domain;	
		}
	},
	
	readpage: function(rscall,playerid) {
		rs.init(rscall);
		rs.data.setParams(rscall);
		rs.getreadids();	
		rs.start(rscall, playerid);
	},
	/* CORE */
	start: function(rscall,playerid) {
		rs.vars.sel.globalcount = 0;
		if (rs.popup.time) {
			clearTimeout(rs.popup.time);
			rs.popup.setVisibility();
		}
	
		rs.vars.currentReadID = rs.data.getParam("readid");
		
		if (rs.data.getParam('speed')) {
			rs.settings.defaultSpeedValue=parseInt(rs.data.getParam('speed'));
			rscall=rscall.replace(/speed=[^&]+/gi,"");
		}
		
		rs.vars.thespeed=rs.convertSpeed(rs.loadSettings("ReadSpeakerHLspeed"));
		
		//TEST
		//if (rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_NO_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.READY)
		rs.vars.previousSync=rs.vars.thesync;
		rs.vars.thesync=rs.loadSettings("ReadSpeakerHL");
		if (rs.vars.thesync === null || rs.vars.thesync==="")
			rs.vars.thesync=rs.settings.defaultSync;		
		

		rs.vars.currentPlayerID=playerid;
		
		if (rs.vars.previousPlayerID !== null) {
			var tempplayerid=null;
			tempplayerid = document.getElementById(rs.vars.previousPlayerID);
			if (tempplayerid) {
				tempplayerid.innerHTML='';
				tempplayerid.style.display="none";
			}
		}	
		rs.vars.previousPlayerID = rs.vars.currentPlayerID;
		
		if ((rs.vars.sel.selectedString && rs.vars.sel.selectedString.length>0) || (rs.vars.sel.selhtml && rs.vars.sel.selhtml.length>0 && rs.vars.STATE.CURRENT == rs.vars.STATE.SETTINGS_CHANGED_PLAYING_USER_SELECTION)) {
			rs.cleanup();
			if (rs.vars.sel.selectedString && rs.vars.sel.selectedString.length>0)
				rs.vars.sel.selhtml=rs.selectRange();
			if (document.selection)
				document.execCommand("Unselect");
			rs.vars.STATE.CURRENT = rs.vars.STATE.PLAYING_USER_SELECTION;	
		}
		else {
			rs.vars.STATE.CURRENT = rs.vars.STATE.PLAYING_NO_SELECTION;
			if (rs.vars.previousSync!="none" || rs.vars.thesync!="none") {
				rs.cleanup();
			}
			if (rs.settings.usePost) {
				if (rs.vars.currentReadID!==null) {
					var x = document.getElementById(rs.vars.currentReadID);
					if (x!==null)
						rs.vars.currentRestoreHTML=x.innerHTML;
				}	
			}
		}
				
		if (rs.data.getUserAgent() == 'IOS') {
			rs.html5.player(rscall);		
		}	
		else if (rs.vars.currentPlayerID=="rs_popup_player") {
			rs.popup.player(rscall);	
		}
		else {
			rs.player(rscall);
		}
		rs.vars.sel.selectedString="";
	},
	
	player: function(rscall) {
		var additionalParams = {};
		if (rs.vars.STATE.CURRENT != rs.vars.STATE.PLAYING_NO_SELECTION) {		
			additionalParams.audioformat = 'flv';
			additionalParams.speed = rs.vars.thespeed;
			additionalParams.sync = 'user';
			additionalParams.syncalignuser = rs.vars.thesync;
			var newrscall=encodeURIComponent(rs.issuePOST(rscall, rs.vars.sel.selhtml, additionalParams));
			
			additionalParams = {};
			additionalParams.audioformat = 'mp3';
			additionalParams.speed = rs.vars.thespeed;
			var savelink=rs.issuePOST(rscall, rs.vars.sel.selhtml, additionalParams);
		}
		else if (rs.settings.usePost) {
			additionalParams.audioformat = 'flv';
			additionalParams.sync = rs.vars.thesync;
			additionalParams.speed = rs.vars.thespeed;
			var newrscall=encodeURIComponent(rs.issuePOST(rscall, "<div id='"+rs.vars.currentReadID+"'>"+rs.vars.currentRestoreHTML+"</div>", additionalParams));

			additionalParams = {};	
			additionalParams.audioformat = 'mp3';
			additionalParams.speed = rs.vars.thespeed;
			var savelink=rs.issuePOST(rscall,"<div id='"+rs.vars.currentReadID+"'>"+rs.vars.currentRestoreHTML+"</div>", additionalParams);	
		}
		else {
			additionalParams.audioformat = 'flv';
			additionalParams.speed = rs.vars.thespeed;
			additionalParams.sync = rs.vars.thesync;
			var newrscall = encodeURIComponent(rs.data.getRSCall(additionalParams));

			additionalParams = {};
			additionalParams.audioformat = 'mp3';
			additionalParams.speed = rs.vars.thespeed;
			var savelink = rs.data.getRSCall(additionalParams);
		}
		var the_player="<div id='rs_playerarea'>";
		the_player+="<div style='margin-bottom: 2px; width: 100%; height: "+rs.settings.flash.height+"px;'><span style='position: absolute; top: 0px; left: 0px;'><object id='rsPlayer' "+(document.selection ? "classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'" : "type='application/x-shockwave-flash' data='"+rs.data.getImage("flashSrc")+"?flv="+newrscall+rs.settings.flash.params+"&text_play="+rs.data.getPhrase("play")+"&text_pause="+rs.data.getPhrase("pause")+"&text_stop="+rs.data.getPhrase("stop")+"&text_vol="+rs.data.getPhrase("volume")+"'")+" style='height:"+rs.settings.flash.height+"px; width:"+rs.settings.flash.width+"px;'>";
		the_player+="<param name='movie' value='"+rs.data.getImage("flashSrc")+"?flv="+newrscall+rs.settings.flash.params+"&text_play="+rs.data.getPhrase("play")+"&text_pause="+rs.data.getPhrase("pause")+"&text_stop="+rs.data.getPhrase("stop")+"&text_vol="+rs.data.getPhrase("volume")+"'>";
		the_player+="<param name='quality' value='high'><param name='autostart' value='true'>";
		the_player+="<param name='allowScriptAccess' value='"+rs.settings.flash.allowScriptAccess+"'><param name='bgcolor' value='#FFFFFF'>";
		the_player+="<param name='loop' value='false'></object></span>";
		the_player+="<span style='position: absolute; top: 4px; right: 4px;'><a style='border-style: none;' href='JavaScript:void(0);' onclick='rs.closepage(\""+rs.vars.currentPlayerID+"\");return false'><img id='closebr' src='"+rs.data.getImage("closeSrc")+"' alt='"+rs.data.getPhrase("closeplayer")+"' title='"+rs.data.getPhrase("closeplayer")+"'></a></span></div>"; //changed href from # to JavaScript:void(0) to prevent pages from refreshing
		the_player+="<div id='bottomlinks'><a href='JavaScript:void(0);' class='rs_settings' onclick='rs.showcontrols(\""+rscall+"\",\""+rs.vars.currentPlayerID+"\");return false'>"+rs.data.getPhrase("settings")+"</a> | <a id='rsSaveBtn' href='"+savelink+"' target='rs' onclick='rs.removeiFrames(); return true;'>"+rs.data.getPhrase("nosound")+"</a> | "+rs.data.getPhrase("speechenabled")+"</div>";
		the_player+="<div id='controls'></div>";
		the_player+="</div>"; 
		var x=document.getElementById(rs.vars.currentPlayerID);
		if (x) {
				x.innerHTML=the_player;
				x.style.display="block";
		}		
	},
	
	getreadids: function() {
		if (rs.vars.readID.length===0) {
			var all_links = document.getElementsByTagName("A");	//Search for all elements that is a link
			for(var i=0;i<all_links.length;i++) {
				if (all_links[i].getAttribute('href') && all_links[i].getAttribute('href').indexOf(rs.settings.appserverhost+'/cgi-bin/'+rs.settings.rsent) != -1 && all_links[i].id != 'rsSaveBtn' && all_links[i].id != 'rs_selimg') {			
					var tmp_array = all_links[i].getAttribute('href').match(/readid=[^&]+/gi);
					if (tmp_array) {
						var readid = tmp_array[0].replace("readid=","");
						rs.vars.readID.push(readid);
					}
				}
			}		
			if (rs.vars.readID.length>0) {
				var tempreadid=null;
				for(var j=0;j<rs.vars.readID.length;j++) {
					tempreadid = document.getElementById(rs.vars.readID[j]);
					if (tempreadid) {
						rs.vars.restoreHTML.push(tempreadid.innerHTML);
					}
				}
				
			}
		}
	},
	
	/* CORE */
	convertSpeed: function(spd) {
		switch(spd) {
			case "slow":
				return rs.settings.defaultSpeedValue-25;
			case "medium":
				return rs.settings.defaultSpeedValue;
			case "fast":
				return rs.settings.defaultSpeedValue+25;
			default:
				return rs.settings.defaultSpeedValue;	
		}
	},
	
	/* CORE */
	closepage: function(playerid) {
		if (rs.data.getUserAgent() == "IOS") {	
			rs.html5.controls.stop();
		}
		var x=document.getElementById(playerid);
		if (x) {
			x.innerHTML='';
			x.style.display="none";		
		}
		rs.vars.STATE.CURRENT = rs.vars.STATE.CLOSE;
		var z= document.getElementById(rs.vars.currentReadID);
		if (z && z.className.toLowerCase().indexOf("rs_reload") >-1 || rs.settings.reloadPage) {
			setTimeout("location.reload(true);",500);
		}
		else {
			setTimeout("rs.cleanup();rs.vars.currentRestoreHTML=null;",500);
			if (document.getElementById("rs_selimg"))
				document.body.removeChild(document.getElementById("rs_selimg"));
			if (document.getElementById("rs_popup_player"))
				document.body.removeChild(document.getElementById("rs_popup_player"));			
		}
	},
	
	/* CORE */
	rshlexit: function() {
		setTimeout("rs.cleanup();",500);
	},
	
	/* CORE */
	/* Save settings to Cookie */
	saveSettings: function(name, content, lifetime) {
		lifetime=parseInt(eval(lifetime));  
		if (lifetime+""=="NaN") {
			tmpdate="";
		}
		else {
			var thedate = new Date();
			thedate.setTime(thedate.getTime() + lifetime);
			thedate=thedate.toGMTString();
			tmpdate="; expires="+thedate;
		}
		document.cookie=name+"="+escape(content)+tmpdate;
	},

	/* CORE */	
	/* Load settings from Cookie */
	loadSettings: function(ckname) {
		ckarr=document.cookie;
		cks=ckarr.split("; ");
		for (i=0;i<cks.length;i++) {
			cknameval=cks[i].split("=");
			for(j=0;j<cknameval.length;j++) {
				if (cknameval[j]==ckname) {
					return unescape(cknameval[j+1]);
				}
			}
		}
		return "";          
	},

	/* CORE */
	/* Save the settings and close the settings menu */
	setstyle: function(style) {
		if (style.indexOf("icon")>-1) {
			rs.saveSettings("ReadSpeakerHLicon",style,rs.settings.cookieLifetime);
		}
		else if (style=="slow" || style=="medium" || style=="fast"){
			rs.saveSettings("ReadSpeakerHLspeed",style,rs.settings.cookieLifetime);
		}
		else {
			rs.saveSettings("ReadSpeakerHL",style,rs.settings.cookieLifetime);
		}
		var x=document.getElementById('controls');
		if (x!==null)
			x.innerHTML="";
	},

	/* CORE */
	/* Show the settings meny */
	showcontrols: function(rscall,playerid) {
		var x=document.getElementById('controls');
		if (x!==null && x.innerHTML!="") {
			x.innerHTML="";
			x.style.display="none";
			return false;
		}
	
		var thevalue = rs.loadSettings("ReadSpeakerHL");
		var theiconvalue = rs.loadSettings("ReadSpeakerHLicon");
		var thespeed = rs.loadSettings("ReadSpeakerHLspeed");
		
		if (thevalue=="")
			thevalue=rs.settings.defaultSync;

		if (theiconvalue=="") {
			if (rs.settings.usePopupButton) {
				theiconvalue=rs.settings.defaultPopup;
			}
			else {
				theiconvalue="iconoff";
			}
		}
			
		if (thespeed=="")
			thespeed=rs.settings.defaultSpeed;	
		
		thestring="<div id='rspopup'><fieldset class='rs_block'><legend>"+rs.data.getPhrase("highlightingoptions")+"</legend><ul>";
		thestring+="<li class="; if (thevalue=="wordsent") thestring+="'rs_active'";
		thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"wordsent\");return false;'>"+rs.data.getPhrase("wordsent")+"</a></li>";
		thestring+="<li class="; if (thevalue=="sent") thestring+="'rs_active'";
		thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"sent\");return false;'>"+rs.data.getPhrase("sentonly")+"</a></li>";
		thestring+="<li class="; if (thevalue=="word") thestring+="rs_active";
		thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"word\");return false;'>"+rs.data.getPhrase("wordonly")+"</a></li>";
		thestring+="<li class="; if (thevalue=="none") thestring+="rs_active";
		thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"none\");return false;'>"+rs.data.getPhrase("nohighlighting")+"</a></li>";
		thestring+="</ul></fieldset>";
		if (rs.settings.usePopupButton) {
			thestring+="<fieldset class='rs_block'><legend>"+rs.data.getPhrase("popupbutton")+"</legend><ul>";
			thestring+="<li class="; if (theiconvalue=="iconon") thestring+="rs_active "; 
			thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"iconon\");return false;'>"+rs.data.getPhrase("show")+"</a></li>";
			thestring+="<li class="; if (theiconvalue=="iconoff") thestring+="rs_active "; 
			thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"iconoff\");return false;'>"+rs.data.getPhrase("hide")+"</a></li>";
			thestring+="</ul></fieldset>";
		}
		thestring+="<fieldset class='rs_block'><legend>"+rs.data.getPhrase("speed")+"</legend><ul>";
		thestring+="<li class="; if (thespeed=="slow") thestring+="rs_active "; 
		thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"slow\");return false;'>"+rs.data.getPhrase("slow")+"</a></li>";
		thestring+="<li class="; if (thespeed=="medium") thestring+="rs_active "; 
		thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"medium\");return false;'>"+rs.data.getPhrase("medium")+"</a></li>";
		thestring+="<li class="; if (thespeed=="fast") thestring+="rs_active "; 
		thestring+="><a href='JavaScript:void(0);' onclick='rs.changeSettings(\""+rscall+"\",\""+playerid+"\",\"fast\");return false;'>"+rs.data.getPhrase("fast")+"</a></li>";
		thestring+="</ul></fieldset></div><div style='clear: both;'></div>";

		var x=document.getElementById('controls');
		if (x!==null) {
			x.style.display="block";
			x.innerHTML=thestring;
		}
	},
	
	changeSettings: function(rscall, playerid, thestyle) {
		if (rs.data.getUserAgent() == 'IOS')
			rs.html5.stop();
		
		if (rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_NO_SELECTION) {
			rs.vars.STATE.CURRENT = rs.vars.STATE.SETTINGS_CHANGED_PLAYING_NO_SELECTION;
		}
		else {
			rs.vars.STATE.CURRENT = rs.vars.STATE.SETTINGS_CHANGED_PLAYING_USER_SELECTION;
		}	
		rs.setstyle(thestyle);
		rs.readpage(rscall,playerid);
	},

	/* CORE */
	/* Triggered by onmouseup - copy the selected text and get mouse position  */
	copyselected: function(e) {
		rs.popup.mouseRel(e);
		setTimeout("rs.getSelectedHTML()",50);
		return true;
	},
	
	/* CORE */
	/* The selected text function */
	getSelectedHTML: function() {
		rs.vars.sel.selectedString="";
		var rng=undefined;
		var selobj=undefined;
		if (window.getSelection) {
			selobj = window.getSelection();
			if (!selobj.isCollapsed) {
				if (selobj.getRangeAt) {
					rng = selobj.getRangeAt(0);
				}
				else {
					rng = document.createRange();
					rng.setStart(selobj.anchorNode,selobj.anchorOffset);
					rng.setEnd(selobj.focusNode,selobj.focusOffset);
				}
				if (rng) {
					DOM = rng.cloneContents();
					object = document.createElement('div');
					object.appendChild(DOM.cloneNode(true));
					rs.vars.sel.selectedString = object.innerHTML;
				}
				else {
					rs.vars.sel.selectedString = selobj;
				}
			}
			rs.vars.sel.selectedRange = rng;
		}
		else if (document.selection) {
			selobj = document.selection;
			rng = selobj.createRange();
			if (rng && rng.htmlText && rng.text && rng.text.length>0) {
				rs.vars.sel.selectedString = rng.htmlText;
			}
			else if (rng && rng.text) {
				rs.vars.sel.selectedString = rng.text;
			}
			else {
				rs.vars.sel.selectedString = "";
			}
			
		}
		else if (document.getSelection) {
			rs.vars.sel.selectedString = document.getSelection();
		}
		if (window.getSelection) {
			if (rs.vars.sel.selectedString.length > 0 && window.getSelection().getRangeAt(0) && window.getSelection().getRangeAt(0).toString().length > 0) {
				rs.popup.button();
			}
			else {
				rs.vars.sel.selectedString="";
			}
		}
		else {
			rs.popup.button();
		}
		if (rs.vars.sel.selectedString.length > 0 && rs.vars.STATE.CURRENT == rs.vars.STATE.READY) {
			rs.vars.STATE.CURRENT = rs.vars.STATE.USER_SELECTION;
		}
		else if (rs.vars.sel.selectedString.length > 0 && rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_USER_SELECTION){
			rs.vars.STATE.CURRENT = rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_USER_SELECTION;
		}
		else if (rs.vars.sel.selectedString.length > 0 && rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_NO_SELECTION){
			rs.vars.STATE.CURRENT = rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_NO_SELECTION;
		}
	},
	
	/* CORE */
	cleanup: function() {
		/** Same IE cleanup is being used for both normal- and selection mode */
		if (document.selection) {
			if (rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_USER_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_NO_SELECTION) {
				if (rs.vars.sel.oldwordhl_IE.length>0) {					
					for(var i=0;i<rs.vars.sel.oldwordhl_IE.length;i++) {
						rs.vars.sel.oldwordhl_IE[i].className = rs.vars.sel.oldwordhlclass_IE[i];
					}
					rs.vars.sel.oldwordhlclass_IE = [];
					rs.vars.sel.oldwordhl_IE = [];
				}	
				if (rs.vars.sel.oldsenthl_IE.length>0) {
					for(var i=0; i < rs.vars.sel.oldsenthl_IE.length;i++) {
						rs.vars.sel.oldsenthl_IE[i].className = rs.vars.sel.oldsenthlclass_IE[i];
					}
					rs.vars.sel.oldsenthl_IE = [];
					rs.vars.sel.oldsenthlclass_IE = [];
				}
			}
			
			if (rs.vars.sel.oldwordhlrange_IE.length>0) {
				for(var i=0;i<rs.vars.sel.oldwordhlrange_IE.length;i++) {
					if (rs.vars.sel.oldwordhlbackcol_IE[i] && rs.vars.sel.oldwordhlforecol_IE) {
						rs.vars.sel.oldwordhlrange_IE[i].execCommand("backcolor",0,rs.vars.sel.oldwordhlbackcol_IE[i]);
						if (rs.vars.sel.oldwordhlforecol_IE[i]!==null)
							rs.vars.sel.oldwordhlrange_IE[i].execCommand("forecolor",0,rs.vars.sel.oldwordhlforecol_IE[i]);
					}	
				}
					rs.vars.sel.oldwordhlrange_IE = [];
					rs.vars.sel.oldwordhlbackcol_IE = [];
					rs.vars.sel.oldwordhlforecol_IE = [];
			}
			if (rs.vars.sel.oldsenthlrange_IE.length>0) {
				for(var i=0;i<rs.vars.sel.oldsenthlrange_IE.length;i++) {
					if (rs.vars.sel.oldsenthlbackcol_IE[i] && rs.vars.sel.oldsenthlforecol_IE) {
						rs.vars.sel.oldsenthlrange_IE[i].execCommand("backcolor",0,rs.vars.sel.oldsenthlbackcol_IE[i]);
						if (rs.vars.sel.oldsenthlforecol_IE[i]!==null)
							rs.vars.sel.oldsenthlrange_IE[i].execCommand("forecolor",0,rs.vars.sel.oldsenthlforecol_IE[i]);
					}	
				}
					rs.vars.sel.oldsenthlrange_IE = [];
					rs.vars.sel.oldsenthlbackcol_IE = [];
					rs.vars.sel.oldsenthlforecol_IE = [];
			}
			if (rs.vars.STATE.CURRENT != rs.vars.STATE.SETTINGS_CHANGED_PLAYING_USER_SELECTION && rs.vars.STATE.CURRENT != rs.vars.STATE.PLAYING_USER_SELECTION)
				rs.vars.sel.selectedWordsRange = [];			
		}
		
		/* Below code is FF only */
		else {
			if (rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_USER_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_NO_SELECTION) {
				/* Below is FF only */
				var elem = document.getElementsByTagName("RS:SPAN");
				for (i=elem.length-1;i>-1;i--) {
					elem[i].className = elem[i].className.replace("sync_sent_highlighted","");
					elem[i].className = elem[i].className.replace("sync_word_highlighted","");
				}
				var elem = document.getElementsByTagName("RSI:SPAN");
				for (i=elem.length-1;i>-1;i--) {
					elem[i].className = elem[i].className.replace("sync_sent_highlighted","");
					elem[i].className = elem[i].className.replace("sync_word_highlighted","");
				}
			}
			if (rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_USER_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.SETTINGS_CHANGED_PLAYING_USER_SELECTION) {
				if (rs.vars.sel.oldwordhl_FF.length>0) {					
					for(var i=0;i<rs.vars.sel.oldwordhl_FF.length;i++) {
						rs.vars.sel.oldwordhl_FF[i].className = rs.vars.sel.oldwordhlclass_FF[i];
					}
					rs.vars.sel.oldwordhlclass_FF = [];
					rs.vars.sel.oldwordhl_FF = [];
				}	
				if (rs.vars.sel.oldsenthl_FF.length>0) {
					for(var i=0; i < rs.vars.sel.oldsenthl_FF.length;i++) {
						rs.vars.sel.oldsenthl_FF[i].className = rs.vars.sel.oldsenthlclass_FF[i];
					}
					rs.vars.sel.oldsenthl_FF = [];
					rs.vars.sel.oldsenthlclass_FF = [];
				}
			}
			if (rs.vars.STATE.CURRENT == rs.vars.STATE.CLOSE || rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_NO_SELECTION) {
				rs.cleanUpSpans();
			}
		}
		
		if (rs.vars.STATE.CURRENT == rs.vars.STATE.CLOSE || rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_NO_SELECTION && rs.vars.restoreHTML!=null && rs.vars.readID!=null) {
			var tempreadid = null;
			for(var j=0;j<rs.vars.readID.length;j++) {
				tempreadid = document.getElementById(rs.vars.readID[j]);
				if (tempreadid && rs.vars.restoreHTML[j]!==null)
					tempreadid.innerHTML=rs.vars.restoreHTML[j];
			}
		}
			
		if (rs.vars.STATE.CURRENT == rs.vars.STATE.CLOSE) {
			rs.vars.STATE.CURRENT = rs.vars.STATE.READY;
			rs.vars.restoreHTML = [];
			rs.vars.readID = [];
		}	

	},
	
	/* CORE */
	issuePOST: function(url, selectedText, additionalParams) {
		rs.vars.sel.globalcount++;
		if (!document.getElementById("postiframe1") || !document.getElementById("postiframe2") || !document.getElementById("postiframe3")) {
			var iframe = null;
			if (document.selection) {
				try {
					iframe = document.createElement('<iframe name="postiframe'+rs.vars.sel.globalcount+'">');   	
				} catch(ex){
					iframe = document.createElement('iframe');                                  
				}
				iframe.name='postiframe'+rs.vars.sel.globalcount;
			}
			else {
				iframe = document.createElement('iframe');
				iframe.name='postiframe'+rs.vars.sel.globalcount;
			}
			iframe.setAttribute('id', 'postiframe'+rs.vars.sel.globalcount); 
			iframe.setAttribute('style', 'display: none; position: absolute;');
			iframe.style.display = 'none';
			
			var bl = document.getElementsByTagName("body");
			var b = null;
			if (bl.length > 0) {
				b = bl.item(0);
			}
			if (b) {
				b.appendChild(iframe);
			} else {
				return;
			}
		}
		
		
		var myInput;
		var randomnumber = Math.random();
		var query = rs.data.getParams();
		for (var key in additionalParams) {
			if(!additionalParams.hasOwnProperty(key))
				continue;
			query[key] = additionalParams[key];
		}
		var theForm = document.createElement("form");
		theForm.target='postiframe'+rs.vars.sel.globalcount;
		theForm.method = "post";
		theForm.action = rs.settings.protocol+"//"+rs.settings.appserverhost+"/enterprise/iframeproxy.php?rsent="+rs.settings.rsent+"&randid="+randomnumber;
		for (var key in query) {
			if(!query.hasOwnProperty(key))
				continue;
			myInput = document.createElement("input");
			myInput.setAttribute("name", key);
			myInput.setAttribute("value", query[key]);		
			theForm.appendChild(myInput);
		}
		myInput = document.createElement("input");
		myInput.setAttribute("name", "output");
		myInput.setAttribute("value", "audiolink");
		theForm.appendChild(myInput);
		
		myInput = document.createElement("input");
		if (rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_NO_SELECTION && rs.settings.usePost) {
			myInput.setAttribute("name", "html_base64");
		}
		else {
			myInput.setAttribute("name", "selectedhtml_base64");
		}
		myInput.setAttribute("value", rs.base64.encode(selectedText));
		theForm.appendChild(myInput);
		document.body.appendChild(theForm);
		theForm.submit();
		document.body.removeChild(theForm);
		
		return rs.settings.protocol+"//"+rs.settings.appserverhost+"/enterprise/iframeproxy.php?rsent="+rs.settings.rsent+"&listen=1&randid="+randomnumber;
	},
	
	removeiFrames: function() {
		if (document.getElementById("postiframe1")) {
			document.body.removeChild(document.getElementById("postiframe1"));
		}
		if (document.getElementById("postiframe2")) {
			document.body.removeChild(document.getElementById("postiframe2"));
		}
		if (document.getElementById("postiframe3")) {
			document.body.removeChild(document.getElementById("postiframe3"));
		}		
	},
	
	/* CORE */
	rshlsetContent: function(thecontent) {
		rs.vars.newhtml+=thecontent;
	},
	
	/* CORE */
	rshlsetId: function(theid) {
		rs.vars.currentReadID=theid;
	},
	
	/* CORE */
	rshlinit: function() {
		if (rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_USER_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_USER_SELECTION) {
			rs.vars.sel.firstrun = 1;
			if (document.selection) {
				document.selection.empty();
			}
			else {
				rs.identifyElementsReplacementNode(document.body);
			}
			rs.vars.newhtml="";
		}
		else {
			if (rs.vars.thesync!="none") {
				var x=null;
				if (rs.vars.currentReadID!==null) {
					x=document.getElementById(rs.vars.currentReadID);
				}
				if (x!==null) {
					x.innerHTML=rs.vars.newhtml;
					rs.vars.newhtml="";
				}
			}
			else {
				rs.vars.newhtml="";
			}
		}
		rs.removeiFrames();
	},
	
	/* CORE */
	/* Function is called from the flash player */
	rshlsync: function(type,id) {
		var addonmarkup = false;
		if ((type&0x000002) == 0) {
			if ((type&0x000001) != 0) {
				addonmarkup = true; //Tillagg 
			} 
			else {	
				addonmarkup = false; //Inte tillÃ¤gg
			}
		} 
		if (rs.vars.STATE.CURRENT == rs.vars.STATE.PLAYING_USER_SELECTION || rs.vars.STATE.CURRENT == rs.vars.STATE.USER_SELECTION_WHILE_PLAYING_USER_SELECTION) {
			if (document.selection) {
				var newEl;
				newEl = rs.vars.sel.selectedWordsRange[id];
				if (rs.vars.sel.firstrun == 1) {
					rs.vars.sel.firstrun = 0;
					if (rs.vars.sel.oldsenthlrange_IE && rs.vars.sel.oldsenthlrange_IE.length>0) {
						for(var i=0;i<rs.vars.sel.oldsenthlrange_IE.length;i++) {
							if (rs.vars.sel.oldsenthlbackcol_IE[i] && rs.vars.sel.oldsenthlforecol_IE) {
								rs.vars.sel.oldsenthlrange_IE[i].execCommand("backcolor",0,rs.vars.sel.oldsenthlbackcol_IE[i]);
								if (rs.vars.sel.oldsenthlforecol_IE[i]!==null)
									rs.vars.sel.oldsenthlrange_IE[i].execCommand("forecolor",0,rs.vars.sel.oldsenthlforecol_IE[i]);
							}
						}
						rs.vars.sel.oldsenthlrange_IE = [];
						rs.vars.sel.oldsenthlbackcol_IE = [];
						rs.vars.sel.oldsenthlforecol_IE = [];
					}					
					if (rs.vars.sel.selectedWordsRange && rs.vars.sel.selectedWordsRange.length>0 && rs.vars.thesync == "wordsent") {
						for(var i=0;i<rs.vars.sel.selectedWordsRange.length;i++) {
							if (rs.vars.sel.selectedWordsRange[i]) {
								rs.vars.sel.oldsenthlrange_IE.push(rs.vars.sel.selectedWordsRange[i]);
								rs.vars.sel.oldsenthlbackcol_IE.push(rs.vars.sel.selectedWordsRange[i].queryCommandValue("backcolor"));
								rs.vars.sel.oldsenthlforecol_IE.push(rs.vars.sel.selectedWordsRange[i].queryCommandValue("forecolor"));
								if (rs.vars.sel.selectedWordsRange[i].text != "") {
									rs.vars.sel.selectedWordsRange[i].execCommand("backcolor",0,rs.settings.sentColor);
									rs.vars.sel.selectedWordsRange[i].execCommand("forecolor",0,rs.settings.textColor);
								}
							}
						}
					}
				}
				
				if (rs.vars.thesync == "wordsent" || rs.vars.thesync=="sent" || rs.vars.thesync == "word" ||  rs.vars.thesync == "") {
					if (!addonmarkup && rs.vars.sel.oldwordhlrange_IE.length>0) {
						for(var i=0; i < rs.vars.sel.oldwordhlrange_IE.length; i++) {
							if (rs.vars.thesync=="word" || rs.vars.thesync=="sent") {
								rs.vars.sel.oldwordhlrange_IE[i].execCommand("backcolor",0,rs.vars.sel.oldwordhlbackcol_IE[i]);
							}
							else {
								rs.vars.sel.oldwordhlrange_IE[i].execCommand("backcolor",0,rs.settings.sentColor);
							}
							rs.vars.sel.oldwordhlrange_IE[i].execCommand("forecolor",0,rs.vars.sel.oldwordhlforecol_IE[i]);
						}
						rs.vars.sel.oldwordhlrange_IE = [];
						rs.vars.sel.oldwordhlbackcol_IE = [];
						rs.vars.sel.oldwordhlforecol_IE = [];
					}
					rs.vars.sel.oldwordhlbackcol_IE.push(newEl.queryCommandValue("backcolor"));
					rs.vars.sel.oldwordhlforecol_IE.push(newEl.queryCommandValue("forecolor"));	
					rs.vars.sel.oldwordhlrange_IE.push(newEl);
					if (rs.vars.thesync=="sent") {
						newEl.execCommand("backcolor",0,rs.settings.sentColor);
					} else {
						newEl.execCommand("backcolor",0,rs.settings.wordColor);
					}
					newEl.execCommand("forecolor",0,rs.settings.textColor);
				 }			
			}
			else {
				var newEl;
				newEl = rs.vars.sel.selectedWordsRange["sync"+(id)];
				if (newEl.className.replace("word","") != newEl.className) {
					if (rs.vars.sel.oldwordhl_FF && rs.vars.sel.oldwordhl_FF.length>0 && rs.vars.sel.oldwordhlclass_FF && rs.vars.sel.oldwordhlclass_FF.length>0 && !addonmarkup) {
						for(var i=0;i<rs.vars.sel.oldwordhl_FF.length;i++) {
							rs.vars.sel.oldwordhl_FF[i].className = rs.vars.sel.oldwordhlclass_FF[i];
						}
						rs.vars.sel.oldwordhlclass_FF = [];
						rs.vars.sel.oldwordhl_FF = [];
					}

					if (rs.vars.thesync == "wordsent" || rs.vars.thesync=="sent" || rs.vars.thesync == "word" ||  rs.vars.thesync == "") {
						rs.vars.sel.oldwordhlclass_FF.push(newEl.className);
						rs.vars.sel.oldwordhl_FF.push(newEl);
						if (rs.vars.thesync=="sent") {
							newEl.className = 'sync_sent_highlighted';
						}
						else {
							newEl.className = 'sync_word_highlighted';
						}
					}
				}
				if (rs.vars.sel.firstrun== 1) {
					rs.vars.sel.firstrun = 0; 
					if (rs.vars.sel.oldsenthl_FF.length>0) {
						for(var i=0; i < rs.vars.sel.oldsenthl_FF.length;i++) {
							rs.vars.sel.oldsenthl_FF[i].className = rs.vars.sel.oldsenthlclass_FF[i];
						}
						rs.vars.sel.oldsenthl_FF = [];
						rs.vars.sel.oldsenthlclass_FF = [];
					}
					if (rs.vars.thesync != "none" && rs.vars.thesync != "word" && rs.vars.thesync!="sent") {
						var sentences = rs.returnClassArraySubstring("ffsent"+rs.vars.sel.seltexttimes+" ");
						for(var i=0; i < sentences.length; i++) {
							rs.vars.sel.oldsenthl_FF[i] = sentences[i];
							rs.vars.sel.oldsenthlclass_FF[i]= rs.vars.sel.oldsenthl_FF[i].className;
							sentences[i].className = 'sync_sent_highlighted';
						}
					}
				}
			}
		}
		else {
			if (document.selection) {
				var newEl;
				newEl = document.getElementById("sync"+(id));
				if (newEl && newEl.className.replace("word","") != newEl.className) {
					if (!addonmarkup && rs.vars.sel.oldwordhl_IE.length>0) {
						for(var i=0; i < rs.vars.sel.oldwordhl_IE.length; i++) {
							rs.vars.sel.oldwordhl_IE[i].className = rs.vars.sel.oldwordhlclass_IE[i];
						}
						rs.vars.sel.oldwordhl_IE = [];
						rs.vars.sel.oldwordhlclass_IE = [];
					}

					rs.vars.sel.oldwordhlclass_IE.push(newEl.className);
					rs.vars.sel.oldwordhl_IE.push(newEl);
					newEl.className = 'sync_word_highlighted';
				} else if (newEl && newEl.className.replace("sent","") != newEl.className) {
					if (!addonmarkup && rs.vars.sel.oldsenthl_IE.length>0) {
						for(var i=0; i < rs.vars.sel.oldsenthl_IE.length; i++) {
							rs.vars.sel.oldsenthl_IE[i].className = rs.vars.sel.oldsenthlclass_IE[i];
						}
						rs.vars.sel.oldsenthl_IE = [];
						rs.vars.sel.oldsenthlclass_IE = [];
					}
					rs.vars.sel.oldsenthlclass_IE.push(newEl.className);
					rs.vars.sel.oldsenthl_IE.push(newEl);
					newEl.className = 'sync_sent_highlighted';
				}
			} else {
				var newEl;
				newEl = document.getElementById("sync"+(id));
				if (newEl && newEl.className.replace("word","") != newEl.className) {
					if (!addonmarkup && rs.vars.sel.oldwordhl_FF.length>0) {
						for(var i=0; i < rs.vars.sel.oldwordhl_FF.length; i++) {
							rs.vars.sel.oldwordhl_FF[i].className = rs.vars.sel.oldwordhlclass_FF[i];
						}
						rs.vars.sel.oldwordhl_FF = [];
						rs.vars.sel.oldwordhlclass_FF = [];
					}

					rs.vars.sel.oldwordhlclass_FF.push(newEl.className);
					rs.vars.sel.oldwordhl_FF.push(newEl);
					newEl.className = 'sync_word_highlighted';
				} else if (newEl && newEl.className.replace("sent","") != newEl.className) {
					if (!addonmarkup && rs.vars.sel.oldsenthl_FF.length>0) {
						for(var i=0; i < rs.vars.sel.oldsenthl_FF.length; i++) {
							rs.vars.sel.oldsenthl_FF[i].className = rs.vars.sel.oldsenthlclass_FF[i];
						}
						rs.vars.sel.oldsenthl_FF = [];
						rs.vars.sel.oldsenthlclass_FF = [];
					}
					rs.vars.sel.oldsenthlclass_FF.push(newEl.className);
					rs.vars.sel.oldsenthl_FF.push(newEl);
					newEl.className = 'sync_sent_highlighted';
				}
			}
		}
	},

	/* FF & IE */
	selectRange: function() {
		rs.vars.sel.seltexttimes++;	
		if (document.selection) { //Set selection in IE
			rs.vars.sel.selectedRange=document.selection.createRange().duplicate();
			return rs.selectRangeIE(rs.vars.sel.selectedRange,-1);
		}
		else { //Set selection for Gecko based browsers
			var globbuf ="";
			var range = rs.vars.sel.selectedRange;
			rs.vars.sel.startNode = range.startContainer;
			rs.vars.sel.endNode = range.endContainer;		
			rs.vars.sel.startOffset = rs.modifyOffsetStartOfWord(rs.vars.sel.startNode,range.startOffset);
			rs.vars.sel.endOffset = rs.modifyOffsetEndOfWord(rs.vars.sel.endNode,range.endOffset);		
			rs.vars.sel.bmindex++;
			rs.vars.sel.sentbmindex = rs.vars.sel.bmindex;
			rs.vars.sel.bmindex++;
			rs.vars.sel.startofsentence = 1;
			globbuf=rs.rangeMarkupGecko(range.commonAncestorContainer);
			window.getSelection().removeAllRanges();
			return (globbuf);
		}
	},
	
	/* Used to mark text when browser is IE */
	selectRangeIE: function(therange) {
		var tempRange = therange.duplicate();
		therange.moveStart("word",-1);
		therange.moveStart("word",1);
		if (!tempRange.isEqual(therange)) 
			therange.moveStart("word",-1);

		tempRange = therange.duplicate();
		therange.moveEnd("word",1);
		therange.moveEnd("word",-1);
		if (!tempRange.isEqual(therange)) 
			therange.moveEnd("word",1);
		
		var rangeCopy = therange.duplicate();
		var i = 0;
		var buf = '';	
		var firstrun = 1;
		var commonParent = therange.parentElement();		
		var lastRangeSameCounter = 0;

		rangeCopy.collapse();
		var lastRange= rangeCopy.duplicate();
		lastRange.collapse(false);
		var cindex = 0;

		while(therange.inRange(rangeCopy) && therange.compareEndPoints("EndToEnd", rangeCopy) != 0) {
			cindex++;
			i++;
			if (i > 10000) {
				break;	
			}
			
			rangeCopy.collapse(false);
			rangeCopy.expand("word",1);	
			var starttag="";
			var endtag="";
			var d=rangeCopy.duplicate();
			d.collapse(false);
			lastRange.collapse(false);
			//if (lastRange.isEqual(d)) {
			if (lastRange.compareEndPoints("StartToStart", d) == 0 && lastRange.compareEndPoints("EndToEnd", d) == 0 && d.htmlText == lastRange.htmlText) {
				lastRangeSameCounter++;
				if (lastRangeSameCounter < 2) {
					rangeCopy.move("character",1);
				} 
				else if (lastRangeSameCounter < 4) {
					rangeCopy.move("character",2);
				} 
				else if (lastRangeSameCounter < 6) {
					rangeCopy.move("word",1);
				} 
				else if (lastRangeSameCounter < 8) {
					rangeCopy.move("word",2);
				} 
				else if (lastRangeSameCounter < 10) {
					rangeCopy.move("sentence",1);
				} 
				else if (lastRangeSameCounter < 12) {
					rangeCopy.move("sentence",2);
				} 
				else {
					break;
				}
				
				rangeCopy.collapse(false);

			} 
			else {
				lastRangeSameCounter = 0;	
				if (cindex == -1) {
					return rangeCopy;
				}
				rs.vars.sel.selectedWordsRange[cindex] = rangeCopy.duplicate();
				var temp=rangeCopy.text;
				var temphtml= rangeCopy.htmlText;
				rangeCopy.collapse(false);				
				var lastCommonLevelLeft;
				if (firstrun) {
					lastPos = rangeCopy.duplicate();
					lastCommonLevelLeft = rs.iterateParentTree(lastPos.parentElement(),document.body,commonParent,0);
				} else {
					lastCommonLevelLeft = rs.iterateParentTree(rangeCopy.parentElement(),lastPos.parentElement(),commonParent,0);
				}

				var lastCommonLevelRight = rs.iterateParentTree(lastPos.parentElement(),rangeCopy.parentElement(),commonParent,0);
				
				var tempElem = rangeCopy.parentElement();
					for(var j=0; j < lastCommonLevelLeft && j < 20; j++) {
						if (!tempElem.className.match("sync_")) {
							// DO not incluide sync_user span tags..
							starttag = tempElem.outerHTML.match('<[^>]*>')[0] + starttag;
						}
						tempElem = tempElem.parentElement;
					}
				var tempElem = lastPos.parentElement();
				for(var j=0; j < lastCommonLevelRight && j < 20; j++) {
					if (!tempElem.className.match("sync_")) {
						// DO not incluide sync_user span tags..
						endtag+="</"+tempElem.tagName+">";
					}
					tempElem = tempElem.parentElement;
				}
				
				if (lastCommonLevelLeft != 0 || lastCommonLevelRight != 0) {
					lastPos = rangeCopy.duplicate();
				}

				if (firstrun) {
					buf+=starttag;	
					firstrun = 0;
				} else {
					buf+=endtag+starttag;	
				}
							
				if (temphtml.replace("sync_sent_highlighted","") != '') {
					buf+="<rs:span class='sync_user' id='sync"+ cindex + "'>"+temp+"</rs:span>"; // temphtml

				}
				lastRange = rangeCopy.duplicate();
			}
		}

		buf+="<!-- f -->";	
		var lastCommonLevelRight = rs.iterateParentTree(lastPos.parentElement(),document.body,commonParent,0);
		var tempElem = lastPos.parentElement();
		for(var j=0; j < lastCommonLevelRight; j++) {
			if (!tempElem.className.match("sync_")) {
				buf+="</"+tempElem.tagName+">";
			}
			tempElem = tempElem.parentElement;
		}		
		rangeCopy.collapse();
		return (buf);
	},
	
	/* IE */
	iterateParentTree: function(currentNode, lastNode, maxDepthNode, i) {
		var c = lastNode;
		while (c !== null) {
			if (currentNode == maxDepthNode) {
				return i;
			} else if (currentNode == c) {
				return i;
			} 
			c=c.parentElement;
		}
		i++;
		return rs.iterateParentTree(currentNode.parentElement,lastNode,maxDepthNode,i); 
	},
	
	/* Used to mark text when browser is FF or similar */
	rangeMarkupGecko: function(node) {
		rs.vars.sel.firstrun = 1;
		var buftemp = '';
		var nodeincluded = rs.vars.sel.inc;
		if (node.nodeType==3) {
			// Text node
			buftemp += rs.markup(node);
		}
		else  {
			var i; 
			var temp = '';
			if (node.hasChildNodes()) {
				for(i=0; i < node.childNodes.length; i++) {
					var n = node.childNodes.item(i);
					if (n == rs.vars.sel.startNode) {
						rs.vars.sel.inc=1;	
					}
					if (node == rs.vars.sel.startNode && i == rs.vars.sel.startOffset) {
						rs.vars.sel.inc=1;
					}
					if (n.nodeType != 8) { // Ignore comments
						temp += rs.rangeMarkupGecko(n);
					}
					if (node == rs.vars.sel.endNode && i == rs.vars.sel.endOffset) {
						rs.vars.sel.inc = 0;
						break;
					}
					if (n==rs.vars.sel.endNode) {
						rs.vars.sel.inc=0;
						break;
					}	
				}
			}
			
			if ((nodeincluded || rs.vars.sel.inc)&& (!node.className || (node.className.replace("sync") == node.className && node.id.replace("sync") == node.id))) {
				var tempdiv = document.createElement('div');
				tempdiv.appendChild(node.cloneNode(true));
				tempdivtag = tempdiv.innerHTML.match('<[^>]*>');
				if (tempdivtag !== null && tempdivtag.length > 0) {
					buftemp+=tempdivtag[0];
					buftemp+=temp;
					buftemp+="</"+node.nodeName+">";
				} 
				else {
					buftemp+=temp;
				}
			}
			else {
				buftemp+=temp;
			}
							
			if (node.hasChildNodes()) {
				for(i=0; i < node.childNodes.length; i++) {
					if (node == rs.vars.sel.endNode && i == rs.vars.sel.endOffset) {
						rs.vars.sel.inc = 0;
						break;
					}
					if (n==rs.vars.sel.endNode) {
						rs.vars.sel.inc=0;
						break;
					}
				}
			}
		}
		return buftemp.replace(/rsi:span/g,"rs:span");
	},
	
	/* FF */
	markup: function(node) {
		var nodeisvalid=true;
		var buftemp = '';
		var i;
		var prefix="";
		var postfix="";
		var thereplace=node.nodeValue;
		if ((node == rs.vars.sel.startNode && rs.vars.sel.startOffset != -1) && (node == rs.vars.sel.endNode && rs.vars.sel.endOffset != -1)) {
			prefix= node.nodeValue.substring(0, rs.vars.sel.startOffset);
			thereplace= node.nodeValue.substring(rs.vars.sel.startOffset, rs.vars.sel.endOffset);
			postfix=node.nodeValue.substring(rs.vars.sel.endOffset);
			rs.vars.sel.inc=1;
		} 
		else if (node == rs.vars.sel.startNode && rs.vars.sel.startOffset != -1) {
			prefix= node.nodeValue.substring(0, rs.vars.sel.startOffset);
			thereplace=node.nodeValue.substring(rs.vars.sel.startOffset);
			rs.vars.sel.inc=1;
		} else if (node == rs.vars.sel.endNode && rs.vars.sel.endOffset != -1) {
			thereplace= node.nodeValue.substring(0, rs.vars.sel.endOffset);
			postfix=node.nodeValue.substring(rs.vars.sel.endOffset);
			rs.vars.sel.inc = 1;
		}
		
		if (!rs.vars.sel.inc) {
			return "";	
		}
		
		for(var i=0;i<rs.vars.sel.exludednodes.length;i++) {
			if (node.parentNode && node.parentNode.nodeName.toLowerCase() == rs.vars.sel.exludednodes[i])
			{
				nodeisvalid=false;
				buftemp = rs.htmlencode(thereplace);
				break;
			}
		}
		if (nodeisvalid)
			buftemp = rs.markupSentences(rs.htmlencode(thereplace),null);
		
		if (node == rs.vars.sel.endNode && rs.vars.sel.endOffset != -1) {
			rs.vars.sel.inc=0;
		}

		if (nodeisvalid && node.parentNode !== null && thereplace != '') {
			var replacechilds = rs.createreplacementnode(prefix+buftemp+postfix,getComputedStyle(node.parentNode,null));
			node.parentNode.insertBefore(replacechilds,node);
			node.parentNode.removeChild(node);
		}
		return buftemp;
	},
	
	/* FF */
	markupSentences: function(content) {
		var sentences = rs.splitString(content, new Array(", ",". ", "! ", "? ", decodeURIComponent("%e3%80%81"), decodeURIComponent("%e3%80%82")));
		if (!sentences) {
			return "";
		}
		var buftemp="";
		var arraytemp = [];
		
		for(var i = 0; i < sentences.length; i++) {
			buftemp+="<rsi:span class=' ffsent"+rs.vars.sel.seltexttimes+" cj"+rs.vars.sel.seltexttimes+"' ";
			buftemp+="id='sync"+(rs.vars.sel.sentbmindex)+"'";
			rs.vars.sel.startofsentence = 0;
			buftemp+=">";	
			buftemp += rs.markupWords(sentences[i]); 
			buftemp+="</rsi:span>";		
		}	
		return buftemp;
	},
	
	/* FF */
	markupWords: function(sentence) {
		var words = rs.splitString(sentence, " ");
		if (!words) {
			return "";
		}
		var buftemp="";
		var arraytemp = [];
		for(var i = 0; i < words.length; i++) {
				buftemp+="<rsi:span class='sync_user word ck"+rs.vars.sel.seltexttimes+"'";
				buftemp+=" id='sync"+(rs.vars.sel.bmindex++)+"'";
				buftemp+=">";
				buftemp+= (words[i]); 
				buftemp+="</rsi:span>";
		}
		return buftemp;
	},
	
	/* FF */
	trim: function(s) {
		return s.replace(/^\s+|\s+$/g,'');
	},

	/* FF */
	htmlencode: function(enc) {
		var d= document.createElement('div');
		var textnode = document.createTextNode(enc);
		d.appendChild(textnode);
		return d.innerHTML;
	},

	/* FF */
	identifyElementsReplacementNode: function(node) {
		if (node.tagName && node.tagName == "RSI:SPAN" && node.id) {
			rs.vars.sel.selectedWordsRange[node.id] = node;
				
		}
		if (node.hasChildNodes()) {
			for(var i = 0; i < node.childNodes.length; i++) {
				var n = node.childNodes.item(i);

				rs.identifyElementsReplacementNode(n);
			}
		}
	},

	/* FF */
	createreplacementnode: function(str,style) {
		var d= document.createElement('rsi:span');
		d.innerHTML=str;
		d.setAttribute("class", 'synctemp cl'+rs.vars.sel.seltexttimes);
		return d;
	},
	
	/* FF */
	modifyOffsetStartOfWord: function(node, offset) {
		var breakarr = new Array(" ", ", ",". ", "! ", "? ", decodeURIComponent("%e3%80%81"), decodeURIComponent("%e3%80%82"));
		while(node.nodeValue && offset != 0) {
			for(var i=0; i < breakarr.length; i++) {
				breakstr=breakarr[i];
				if (node.nodeValue.substring(offset-1).indexOf(breakstr) == 0) {
					return offset;
				}
			}
			offset--;
		}
		return offset;
	},
	
	/* FF */
	modifyOffsetEndOfWord: function(node, offset) {		
		var breakarr = new Array(" ", ", ",". ", "! ", "? ", decodeURIComponent("%e3%80%81"), decodeURIComponent("%e3%80%82"));
		while(node.nodeValue && offset != node.nodeValue.length) {
			for(var i=0; i < breakarr.length; i++) {
				breakstr=breakarr[i];
				if (node.nodeValue.substring(offset-1).indexOf(breakstr) == 0) {
					return offset;
				}
			}
			offset++;
		}
		return offset;
	},

	/* FF */
	/* Returns an Array with the given class */
	returnClassArraySubstring: function(theclass) {
		var elem = document.getElementsByTagName("*");
		var tempNum = 0;
		var theArray = [];
		for (i=0;i<elem.length;i++) {
			if (elem[i].className.replace(theclass,"")!=elem[i].className) {
				theArray[tempNum]=elem[i];
				tempNum++;
			}
		}
		return theArray;
	},

	/* FF */
	/* Moves all childNodes of an rsi:span to the same level in DOM tree as the given span and then removes the span */
	cleanUpSpans: function() {
		var elem = document.getElementsByTagName("RSI:SPAN");
		var newElem;
		for (i=elem.length-1;i>-1;i--) {
				newElem = document.createDocumentFragment();
				for(j=0;j<elem[i].childNodes.length;j++) {
					newElem.appendChild(elem[i].childNodes[j].cloneNode(true));
				}
				elem[i].parentNode.replaceChild(newElem,elem[i]);		
		}
	},

	/* FF */
	/* Returns an array where the string has been split */                           
	splitString: function(thestring,separators) {
		var theArray = new Array("");
		var j=0;
		for(var i=0;i<thestring.length;i++) {
			for(var k=0;k<separators.length;k++) {
				var separator = separators[k];
				var matched = true;
				for(var l=0;l<separator.length;l++) {
					if (thestring.length-(i+l) < 0 || separator[separator.length-l-1] != thestring[i-l-1]) {
						matched = false;
						break;
					}
				}
				
				if (matched) {
					j++;
					theArray[j]="";
				} 
			}
			theArray[j] += thestring[i];

		}
		return theArray;
	},
	
	popup: {
		buttonExists: null,
		firstRun: true,
		mouse_y_startpos: null,
		mouse_x_pos: null,
		mouse_y_pos: null,
		player_x_pos: null,
		player_y_pos: null,
		time: null,
		viewportwidth: null,
		viewportheight: null,
		button: function() {
			if (rs.popup.mouse_x_pos && rs.popup.mouse_y_pos && rs.vars.sel.selectedString.length>0) {
				if (!document.getElementById('rs_selimg')) {					
					if (rs.popup.buttonExists) {
						var theimg=document.createElement("img");
						theimg.setAttribute("src",rs.data.getImage("popupSrc"));
						theimg.style.border="none";
						theimg.setAttribute("alt",rs.data.getPhrase("listentoselectedtext"));
						theimg.setAttribute("title",rs.data.getPhrase("listentoselectedtext"));
						
						var thebutton=document.createElement("a");
						thebutton.setAttribute("id","rs_selimg");
						thebutton.setAttribute("href",rs.settings.rscall);
						thebutton.setAttribute("onclick","clearTimeout(rs.popup.time);rs.popup.setVisibility();" + rs.settings.onclick);
						thebutton.setAttribute("onmouseover","clearTimeout(rs.popup.time);");
						thebutton.setAttribute("onmouseout","rs.popup.hideIcon();");
						thebutton.onclick=new Function("clearTimeout(rs.popup.time);rs.popup.setVisibility();"+rs.settings.onclick); // some browsers does not parse setAttribute values
						thebutton.onmouseover=new Function("clearTimeout(rs.popup.time);");
						thebutton.onmouseout=new Function("rs.popup.hideIcon();");
						thebutton.appendChild(theimg);
						
						var thecode=document.createDocumentFragment();
						thecode.appendChild(thebutton);
						document.body.appendChild(thecode);
					}
					else if (rs.popup.firstRun){
						rs.init();
						rs.popup.firstRun=false;
						rs.popup.button();
					}
				}
				if (rs.popup.buttonExists) {
					var temp = document.getElementById('rs_selimg');
					temp.style.top = rs.popup.mouse_y_pos+'px';
					temp.style.left = rs.popup.mouse_x_pos+'px';
					rs.popup.player_y_pos = rs.popup.mouse_y_pos+'px';				
					rs.popup.player_x_pos = rs.popup.mouse_x_pos+'px';
					var settings = rs.loadSettings("ReadSpeakerHLicon");
					if (settings=="") {
						if (rs.settings.usePopupButton) {
							settings=rs.settings.defaultPopup;
						}
						else {
							settings="iconoff";
						}
					}	
					if (settings=="iconoff") {
						temp.style.display = "none";
					}
					else {
						temp.style.display = "inline";
					}
					rs.popup.hideIcon();
				}
			}
		},
		
		player: function(rscall) {
			var additionalParams = {};
			additionalParams.audioformat = 'flv';
			additionalParams.sync = 'user';
			additionalParams.speed = rs.vars.thespeed;
			additionalParams.syncalignuser = rs.vars.thesync;		
			var newrscall=encodeURIComponent(rs.issuePOST(rscall, rs.vars.sel.selhtml, additionalParams));
			
			additionalParams = {};	
			additionalParams.speed = rs.vars.thespeed;
			var savelink=rs.issuePOST(rscall, rs.vars.sel.selhtml, additionalParams);
		
			var t = document.getElementById(rs.vars.currentPlayerID);
			if (!t) {
				var popup_player=document.createElement("div");
				popup_player.setAttribute("id","rs_popup_player");
				var thecode=document.createDocumentFragment();
				thecode.appendChild(popup_player);
				document.body.appendChild(thecode);
				t = document.getElementById(rs.vars.currentPlayerID);
			}
			t.style.top = rs.popup.player_y_pos;
			t.style.left = rs.popup.player_x_pos;
			var the_player="<div style='height: "+rs.settings.flash.popupHeight+"px;'><span style='position: absolute; top: 0px; left: 0px;'><object id='rsPlayer' "+(document.selection ? "classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'" : "type='application/x-shockwave-flash' data='"+rs.data.getImage("flashSrc")+"?flv="+newrscall+rs.settings.flash.params+"&rplayer=mini&text_play="+rs.data.getPhrase("play")+"&text_pause="+rs.data.getPhrase("pause")+"&text_stop="+rs.data.getPhrase("stop")+"&text_vol="+rs.data.getPhrase("volume")+"'")+" style='height:"+rs.settings.flash.popupHeight+"px; width:"+rs.settings.flash.popupWidth+"px;'>";
			the_player+="<param name='movie' value='"+rs.data.getImage("flashSrc")+"?flv="+newrscall+rs.settings.flash.params+"&rplayer=mini&text_play="+rs.data.getPhrase("play")+"&text_pause="+rs.data.getPhrase("pause")+"&text_stop="+rs.data.getPhrase("stop")+"&text_vol="+rs.data.getPhrase("volume")+"'>";
			the_player+="<param name='quality' value='high'><param name='autostart' value='true'>";
			the_player+="<param name='allowScriptAccess' value='"+rs.settings.flash.allowScriptAccess+"'><param name='bgcolor' value='#FFFFFF'>";
			the_player+="<param name='loop' value='false'><a id='rsSaveBtn' href='"+savelink+"' target='rs'>"+rs.data.getPhrase("nosound")+"</a></object></span>";
			the_player+="<span style='position: absolute; top: 4px; right: 4px;'><a href='JavaScript:void(0);' onclick='rs.closepage(\""+rs.vars.currentPlayerID+"\");return false'><img style='border-style: none !important; margin: 0px !important;' src='"+rs.data.getImage("closeSrc")+"' title='"+rs.data.getPhrase("closeplayer")+"' alt='"+rs.data.getPhrase("closeplayer")+"'></a></span></div>"; //changed href from # to JavaScript:void(0) to prevent pages from refreshing
			the_player+="<span id='rs_popup_link' style='position: absolute; top: 4px; right: 21px;'><a href='JavaScript:void(0);' onclick='rs.showcontrols(\""+rscall+"\",\""+rs.vars.currentPlayerID+"\");return false'><img style='border-style: none !important;' src='"+rs.data.getImage("settingsSrc")+"' alt='"+rs.data.getPhrase("settings")+"' title='"+rs.data.getPhrase("settings")+"'></a></span>";
			the_player+="<div id='controls'></div>";

			var x=document.getElementById(rs.vars.currentPlayerID);
			if (x) {
				x.innerHTML=the_player;
				x.style.display="block";
			}
		},
		
		/* CORE */
		/* Time to wait before hiding the RS icon */
		hideIcon: function() {	
			if (rs.popup.time) {
				clearTimeout(rs.popup.time);
			}
			rs.popup.time = setTimeout("rs.popup.setVisibility()",2500);
		},
		
		/* CORE */
		/* Hide the RS icon */
		setVisibility: function() {
			if (document.getElementById('rs_selimg')) {
				document.getElementById('rs_selimg').style.display="none";
			}
		},

		/* CORE */
		mousePress: function(e) {
			if (!e) var e = window.event;
			e.cancelBubble = true;
			if (e.stopPropagation) e.stopPropagation();
			
			if (e.pageX || e.pageY) {
				rs.popup.mouse_y_startpos = e.pageY;
			}
			else if (e.clientX || e.clientY) {
				rs.popup.mouse_y_startpos = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
			}
			return true;
		},
		
		/* CORE */
		mouseRel: function(e) {
			if (!e) var e = window.event;
			e.cancelBubble = true;
			if (e.stopPropagation) e.stopPropagation();
			
				var yvalue=null;
				var xvalue=null;
				rs.popup.getViewportSize();
				if (e.pageX || e.pageY) {
					yvalue = e.pageY;
					xvalue = e.pageX;
				}
				else if (e.clientX || e.clientY) {
					yvalue = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
					xvalue = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;

				}
				if (yvalue > rs.popup.mouse_y_startpos)
				{
					if ((yvalue+20)>(rs.popup.viewportheight-30)) {
						rs.popup.mouse_y_pos = yvalue-40;
					}
					else {
						rs.popup.mouse_y_pos = yvalue+20;
					}			
				}
				else {
					if ((yvalue-40)<10) {
						rs.popup.mouse_y_pos = yvalue+20;
					}
					else {
						rs.popup.mouse_y_pos = yvalue-40;
					}
				}
				if (xvalue<5) {
					rs.popup.mouse_x_pos = xvalue+30;
				}
				else if (xvalue>rs.popup.viewportwidth-80) {
					rs.popup.mouse_x_pos = xvalue-80;
				}
				else {
					rs.popup.mouse_x_pos = xvalue+15;
				}
			return true;
		},
		
		getViewportSize: function () {

			// the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight
			if (typeof window.innerWidth != 'undefined')
			{
			  rs.popup.viewportwidth = window.innerWidth + document.body.scrollLeft + document.documentElement.scrollLeft;
			  rs.popup.viewportheight = window.innerHeight + document.body.scrollTop + document.documentElement.scrollTop;  
			}

			// IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)
			else if (typeof document.documentElement != 'undefined' && typeof document.documentElement.clientWidth != 'undefined' && document.documentElement.clientWidth != 0)
			{
			   rs.popup.viewportwidth = document.documentElement.clientWidth + document.body.scrollLeft + document.documentElement.scrollLeft;
			   rs.popup.viewportheight = document.documentElement.clientHeight + document.body.scrollTop + document.documentElement.scrollTop;
			}

			// older versions of IE
			else
			{
			   rs.popup.viewportwidth = document.getElementsByTagName('body')[0].clientWidth + document.body.scrollLeft + document.documentElement.scrollLeft;
			   rs.popup.viewportheight = document.getElementsByTagName('body')[0].clientHeight + document.body.scrollTop + document.documentElement.scrollTop;
			}
		}	
	},
	
	base64: {
		encode: function(data) {
		  newdata=encodeURIComponent(data);
		  var i=0;
		  var j=0;
		  var dataarr=[];
		  for(; i < newdata.length; i++) {
			  if (newdata.charCodeAt(i)!='%'.charCodeAt(0)) {
				  dataarr[j] = newdata.charCodeAt(i);
			  } 
				else {
				  dataarr[j] = parseInt("0x"+newdata.charAt(i+1)+""+newdata.charAt(i+2));
				  i=i+2;
			  }
			  j++;
		  }
		  
		  var size = dataarr.length;
		  var newsize=4*parseInt((size+2)/3);
		  var buff=new String();
		  var completetriples=parseInt(size/3);
		  var ch;
		  var remaining=size-3*completetriples;
		  i=0;
		  for (;i<3*completetriples;i+=3) {
				ch=rs.base64.chars(dataarr[i]>>2);
				buff+=ch;
				ch=rs.base64.chars(((dataarr[i]&0x03)<<4)|(dataarr[i+1]>>4));
				buff+=ch;
				ch=rs.base64.chars(((dataarr[i+1]&0x0f)<<2)|(dataarr[i+2]>>6));
				buff+=ch;
				ch=rs.base64.chars(dataarr[i+2]&0x3f);
				buff+=ch;
		  }
		  if (remaining==1) {
				buff+=rs.base64.chars(dataarr[i]>>2);
				buff+=rs.base64.chars((dataarr[i]&0x03)<<4);
				buff+='=';
				buff+='=';
		  }
		  if (remaining==2) {
				buff+=rs.base64.chars(dataarr[i]>>2);
				buff+=rs.base64.chars(((dataarr[i]&0x03)<<4)|(dataarr[i+1]>>4));
				buff+=rs.base64.chars((dataarr[i+1]&0x0f)<<2);
				buff+='=';
		  }
		  return buff;
		},
		
		decode: function(text) {
		  var buff = '';
		  var ch='';
		  var pos=0;
		  var numeq=0;
		  var block = '';
		  var size = text.length;
		  while (pos<size) {
			if (rs.base64.value(text[pos])!=-1) {
			  block = text.substring(pos, pos+4);
			  numeq=0;
			  for (i=0;i<4;i++)
				if (block[i]=='=')
				  numeq++;
			  for (i=0;i<3-numeq;i++) {
				if (i==0)
				  ch=(rs.base64.value(block[0]) <<2)|((rs.base64.value(block[1])&0x30)>>4);
				else if (i==1)
				  ch=((rs.base64.value(block[1])&0x0f) <<4)|((rs.base64.value(block[2])&0x3c)>>2);
				else if (i==2)
				  ch=((rs.base64.value(block[2])&0x03) <<6)|rs.base64.value(block[3]);
				var chhex = ch.toString(16);
				if (chhex.length==1)
				  chhex = "0"+chhex;
				buff += "%"+chhex;
			  }
			  pos+=4;
			}
			else
			  pos++;
		  }

		  return decodeURIComponent(buff);
		},
		
		value: function(cha) {
		  var ch = cha.charCodeAt(0);
		  if (ch>='A'.charCodeAt(0) && ch<='Z'.charCodeAt(0))
			return ch-'A'.charCodeAt(0);
		  else if (ch>='a'.charCodeAt(0) && ch<='z'.charCodeAt(0))
			return ch-'a'.charCodeAt(0)+26;
		  else if (ch>='0'.charCodeAt(0) && ch<='9'.charCodeAt(0))
			return ch-'0'.charCodeAt(0)+52;
		  else if (ch=='+'.charCodeAt(0))
			return 62;
		  else if (ch=='/'.charCodeAt(0))
			return 63;
		  else
			return -1;
		},
		
		chars: function(val) {
		  if (val<26)
			return String.fromCharCode(val+'A'.charCodeAt(0));
		  else if (val<52)
			return String.fromCharCode(val+'a'.charCodeAt(0)-26);
		  else if (val<62)
			return String.fromCharCode(val+'0'.charCodeAt(0)-52);
		  else if (val==62)
			return '+';
		  else if (val==63)
			return '/';
		  else
			return String.fromCharCode(0);
		}		
	},
	
	html5: {
		STATE_BEGIN: 0,
		STATE_USER_START_NOT_READY: 1,
		STATE_USER_START_PLAYING: 2,
		state: 0,
		
		inUse: false,
		audioelement: null,
		lastcurrenttime: -1,
		currentsyncindex: 0,
		lastevent: null,
		lastlastevent: null,
		lastlastlastevent: null,
		synclist: new Array(),
		synclistindex: 0,
		url: null,
		iframeurl: null,
		
		player: function(rscall) {
			var groupid=Math.random();
			var additionalParams = {};
			if (rs.vars.STATE.CURRENT != rs.vars.STATE.PLAYING_NO_SELECTION) {
				additionalParams.audioformat = 'mp3';
				additionalParams.sync = 'user';
				additionalParams.speed = rs.vars.thespeed;
				additionalParams.syncalignuser = rs.vars.thesync;
				additionalParams.requestgrouptype = 'html5iframe';
				additionalParams.requestgroup = groupid;		
				rs.html5.url = rs.issuePOST(rscall, rs.vars.sel.selhtml, additionalParams);
				
				additionalParams.audioformat = 'html5iframe';
				rs.html5.iframeurl = rs.issuePOST(rscall, rs.vars.sel.selhtml, additionalParams);

				additionalParams = {};
				additionalParams.speed = rs.vars.thespeed;
				var savelink = rs.issuePOST(rscall, rs.vars.sel.selhtml, additionalParams);		
			}
			else if (rs.settings.usePost) {
				additionalParams.audioformat = 'mp3';
				additionalParams.sync = rs.vars.thesync;
				additionalParams.speed = rs.vars.thespeed;
				additionalParams.requestgrouptype = 'html5iframe';
				additionalParams.requestgroup = groupid;
				rs.html5.url = rs.issuePOST(rscall, "<div id='"+rs.vars.currentReadID+"'>"+rs.vars.currentRestoreHTML+"</div>", additionalParams);
				
				additionalParams.audioformat = 'html5iframe';
				rs.html5.iframeurl = rs.issuePOST(rscall, "<div id='"+rs.vars.currentReadID+"'>"+rs.vars.currentRestoreHTML+"</div>", additionalParams);
				
				additionalParams = {};
				additionalParams.speed = rs.vars.thespeed;
				var savelink = rs.issuePOST(rscall, "<div id='"+rs.vars.currentReadID+"'>"+rs.vars.currentRestoreHTML+"</div>", additionalParams);
			}
			else {
				additionalParams.audioformat = 'mp3';
				additionalParams.sync = rs.vars.thesync;
				additionalParams.speed = rs.vars.thespeed;
				additionalParams.requestgrouptype = 'html5iframe';
				additionalParams.requestgroup = groupid;				
				rs.html5.url = rs.data.getRSCall(additionalParams);
				
				additionalParams.audioformat = 'html5iframe';
				rs.html5.iframeurl = rs.data.getRSCall(additionalParams);
				
				additionalParams = {};
				additionalParams.audioformat = 'mp3';
				additionalParams.speed = rs.vars.thespeed;
				var savelink = rs.data.getRSCall(additionalParams);
			}
				
			var the_player="<div id='rs_playerarea'><div style='margin-bottom: 2px; width: 100%; height: 20px;'>";
			the_player+="<div style='position: absolute; top: 4px; left: 4px;'><a id='rs_playbtn' href='JavaScript:void(0);'><img id='rs_playimg' style='border-style: none !important; margin: 0px !important; padding:0px !important;' src='"+rs.data.getImage("playInactiveSrc")+"' title='"+rs.data.getPhrase('play')+"' alt='"+rs.data.getPhrase('play')+"'></a></div>";
			the_player+="<div style='position: absolute; top: 4px; left: 21px;'><a id='rs_pausebtn' href='JavaScript:void(0);'><img id='rs_pauseimg' style='border-style: none !important; margin: 0px !important; padding:0px !important;' src='"+rs.data.getImage("pauseSrc")+"' title='"+rs.data.getPhrase('pause')+"' alt='"+rs.data.getPhrase('pause')+"'></a></div>";
			the_player+="<div style='position: absolute; top: 4px; left: 38px;'><a id='rs_stopbtn' href='JavaScript:void(0);'><img id='rs_stopimg' style='border-style: none !important; margin: 0px !important; padding:0px !important;' src='"+rs.data.getImage("stopSrc")+"' title='"+rs.data.getPhrase('stop')+"' alt='"+rs.data.getPhrase('stop')+"'></a></div>";
			the_player+="<div id='timeline'><div id='duration'></div><span id='durationtxt'></span></div>";
			the_player+="<div style='position: absolute; top: 2px; left: 231px;'><a href='http://www.readspeaker.com/?ref="+encodeURIComponent(document.location.href)+"'><img style='border-style: none !important; margin: 0px !important; padding:0px !important;' src='"+rs.data.getImage("iconSrc")+"' title='Go to the ReadSpeaker website' alt='Go to the ReadSpeaker website' /></a></div>";
			the_player+="<span style='position: absolute; top: 4px; right: 4px;'><a style='border-style: none;' href='JavaScript:void(0);' onclick='rs.html5.stop();rs.closepage(\""+rs.vars.currentPlayerID+"\");return false'><img style='border-style: none !important; margin: 0px !important;' id='closebr' src='"+rs.data.getImage("closeSrc")+"' alt='"+rs.data.getPhrase('closeplayer')+"' title='"+rs.data.getPhrase('closeplayer')+"'></a></span></div>"; //changed href from # to JavaScript:void(0) to prevent pages from refreshing
			the_player+="<div id='bottomlinks'><a href='JavaScript:void(0);' class='rs_settings' onclick='rs.showcontrols(\""+rscall+"\",\""+rs.vars.currentPlayerID+"\");return false'>"+rs.data.getPhrase('settings')+"</a> | <a id='rsSaveBtn' href='"+savelink+"' target='rs'>"+rs.data.getPhrase('nosound')+"</a> | "+rs.data.getPhrase('speechenabled')+"</div>";
			the_player+="<div id='controls'></div>";
			the_player+="</div>";	
			
			var x=document.getElementById(rs.vars.currentPlayerID);
			if (x) {
					x.innerHTML=the_player;
					x.style.display="block";
			}
			rs.html5.start();
		},
		
		start: function() {
			rs.html5.stop();
			var synciframe = null;
			
			rs.html5.audioelement = new Audio(rs.html5.url);
			rs.html5.audioelement.setAttribute('controls', 'controls');
			rs.html5.audioelement.loop = false;
			
			rs.html5.audioelement.play();
						
			rs.html5.audioelement.addEventListener('ended', rs.html5.controls.stop,false);
			rs.html5.audioelement.addEventListener('timeupdate', rs.html5.controls.timer, false);
	
			var play = document.getElementById('rs_playbtn');
			play.addEventListener('click', rs.html5.controls.play, false);

			var pause = document.getElementById('rs_pausebtn');
			pause.addEventListener('click', rs.html5.controls.pause, false);
			
			var stop = document.getElementById('rs_stopbtn');
			stop.addEventListener('click', rs.html5.controls.stop, false);

			// Get the HTML5 range input element and append audio volume adjustment to onchange
			/*var volume = document.getElementById('volume');
			volume.addEventListener('change', function(){
				audio.volume = parseFloat(this.value / 10);
			}, false);*/			
			
			if (rs.vars.thesync!='none') {
				if (!document.getElementById('synciframe')) {
					synciframe = document.createElement('iframe');
					synciframe.setAttribute('id','synciframe');
				} else {
					synciframe = document.getElementById("synciframe");
				}
				
				synciframe.src=rs.html5.iframeurl;
				synciframe.type = 'text/javascript';
				synciframe.height=0;
				synciframe.width=0;
				synciframe.style.display="none";
				document.body.appendChild(synciframe);
				
				rs.html5.refresh();
			}
			else {
				rs.html5.state = rs.html5.STATE_USER_START_PLAYING;
			}
		},
		
		controls: {
			play: function() {
				if (rs.html5.audioelement) {
					rs.html5.audioelement.play();
				}
				else {
					rs.html5.start(rs.html5.url);
				}
				if (document.getElementById("rs_playimg"))
					document.getElementById("rs_playimg").setAttribute("src",rs.data.getImage("playInactiveSrc"));			
				if (document.getElementById("rs_pauseimg"))	
					document.getElementById("rs_pauseimg").setAttribute("src",rs.data.getImage("pauseSrc"));
				if (document.getElementById("rs_stopimg"))	
					document.getElementById("rs_stopimg").setAttribute("src",rs.data.getImage("stopSrc"));					
			},
			pause: function() {
				setTimeout("rs.html5.audioelement.pause()",200);
				if (document.getElementById("rs_pauseimg"))	
					document.getElementById("rs_pauseimg").setAttribute("src",rs.data.getImage("pauseInactiveSrc"));
				if (document.getElementById("rs_playimg"))
					document.getElementById("rs_playimg").setAttribute("src",rs.data.getImage("playSrc"));		
			},
			stop: function() {
				if (rs.html5.audioelement)
					rs.html5.audioelement.removeEventListener('timeupdate', rs.html5.controls.timer, false);
				rs.html5.stop();
				rs.rshlexit();
				if (document.getElementById("rs_stopimg"))	
					document.getElementById("rs_stopimg").setAttribute("src",rs.data.getImage("stopInactiveSrc"));			
				if (document.getElementById("rs_playimg"))
					document.getElementById("rs_playimg").setAttribute("src",rs.data.getImage("playSrc"));
				if (document.getElementById("rs_pauseimg"))	
					document.getElementById("rs_pauseimg").setAttribute("src",rs.data.getImage("pauseInactiveSrc"));	
				var duration = document.getElementById('duration');
				duration.style.width="0%";
				var durationtxt = document.getElementById('durationtxt');
				durationtxt.innerHTML = '00:00 | 00:00';
			},
			timer: function() {
				if (rs.html5.audioelement) {
					var duration = document.getElementById('duration');
					var durationtxt = document.getElementById('durationtxt');
					var length = rs.html5.audioelement.duration;
					
					var secs = rs.html5.audioelement.currentTime;
					duration.style.width=secs/length*100+"%";
					if (!length) {
						var ts='00';
						var tm='00';
						var th='';
					}
					else {
						var ts = parseInt(length % 60)+'';
						var tm = parseInt((length / 60) % 60)+'';
						var th = parseInt(((length / 60) / 60) % 60)+'';				
					}
					var s = parseInt(rs.html5.audioelement.currentTime % 60)+'';
					var m = parseInt((rs.html5.audioelement.currentTime / 60) % 60)+'';
					var h = parseInt(((rs.html5.audioelement.currentTime / 60) / 60) % 60)+'';
					
					if (th!=0) {
						if (th.length<2)
							th=0+th+':';
						if (h.length<2)
							h=0+h+':';
					}
					else {
						th='';
						h='';
					}
					if (tm.length<2)
						tm=0+tm;
					if (ts.length<2)
						ts=0+ts;				
					if (m.length<2)
						m=0+m;
					if (s.length<2)
						s=0+s;
					
					
					if (length) {
						durationtxt.innerHTML = h + m + ':' + s + ' | ' + th + tm + ':' +ts;
					}
					else {
						durationtxt.innerHTML = '00:00 | 00:00';
					}
				}
			}
		},
		
		stop: function() {
			if (rs.html5.state != rs.html5.STATE_BEGIN) {
				
				if (rs.html5.audioelement) {
					rs.html5.audioelement.pause();
				}
				rs.html5.audioelement = null;
				
				var synciframe = document.getElementById("synciframe");
				if (synciframe)
					synciframe.src="about:blank";
				
				//rshlexit();
			}
			rs.html5.state = rs.html5.STATE_BEGIN;
			rs.html5.lastcurrenttime = -1;
			rs.html5.currentsyncindex = 0;
			rs.html5.synclistindex = 0;
			rs.html5.synclist = [];
		},
		
		receiveMessage: function(event) {
			if (!event.origin.match(/readspeaker.com/gi)) {
			  return;
			}

			if (rs.html5.lastevent != null && event.data == "rshlsetContent") {
				rshlsetContent(rs.base64.decode(rs.html5.lastevent.data));
			} else if (rs.html5.lastevent != null && event.data == "rshlsetId") {
				rshlsetId(rs.html5.lastevent.data);
			} else 	if (event.data == "rshlinit") {
				rshlinit();
			} else 	if (rs.html5.lastlastlastevent != null && rs.html5.lastlastevent != null && rs.html5.lastevent != null && event.data == "rshlsync") {		
				rs.html5.synclist[rs.html5.synclistindex] =  [rs.html5.lastlastlastevent.data, rs.html5.lastlastevent.data, rs.html5.lastevent.data];
				rs.html5.synclistindex++;
			} 
			
			
			rs.html5.lastlastlastevent = rs.html5.lastlastevent;
			rs.html5.lastlastevent = rs.html5.lastevent;
			rs.html5.lastevent = event;
		},
		
		refresh: function() {
			if (!rs.html5.audioelement) { return; }
			
			if (rs.html5.audioelement.currentTime > 0 && rs.html5.lastcurrenttime > rs.html5.audioelement.currentTime) {
				rs.html5.controls.stop();
				return;
			}
			rs.html5.lastcurrenttime = rs.html5.audioelement.currentTime;
			
			if (rs.html5.state == rs.html5.STATE_BEGIN) {
				rs.html5.audioelement.pause();
				rs.html5.state = rs.html5.STATE_USER_START_NOT_READY;
				setTimeout("rs.html5.refresh()", 0);
			} 
			else {
				if (rs.html5.state == rs.html5.STATE_USER_START_NOT_READY) {
					if (rs.html5.synclist[rs.html5.currentsyncindex] && rs.html5.audioelement.buffered && rs.html5.audioelement.buffered.length > 0 && rs.html5.synclist[rs.html5.currentsyncindex][0] < rs.html5.audioelement.buffered.end(0) * 1000) {
						rs.html5.state = rs.html5.STATE_USER_START_PLAYING;
						rs.html5.audioelement.play();
						setTimeout("rs.html5.refresh()", 0);
					}
					else {
					   if (rs.html5.synclist[rs.html5.currentsyncindex]) {
							if (rs.html5.synclist[rs.html5.currentsyncindex][0] * 1 - rs.html5.audioelement.currentTime * 1000 <= 20) {
								 setTimeout("rs.html5.refresh()", 0);
							}
							else {
								var temptime = rs.html5.synclist[rs.html5.currentsyncindex][0] * 1 - rs.html5.audioelement.currentTime * 1000-20;
								if (temptime > 75) {
									 setTimeout("rs.html5.refresh()",75);
								}
								else if (temptime < 0) {
									 setTimeout("rs.html5.refresh()", 0);								
								} 
								else {
									 setTimeout("rs.html5.refresh()", temptime);
								}
							}                  
						}
						else {
							setTimeout("rs.html5.refresh()", 75);
						}
					}
				}
				else {
					if (rs.html5.state == rs.html5.STATE_USER_START_PLAYING) {						
						if (rs.html5.synclist[rs.html5.currentsyncindex] && rs.html5.synclist[rs.html5.currentsyncindex][0] * 1 - 20 < rs.html5.audioelement.currentTime * 1000) {
							rshlsync(rs.html5.synclist[rs.html5.currentsyncindex][1],rs.html5.synclist[rs.html5.currentsyncindex][2]);
							rs.html5.currentsyncindex++;
							if (rs.html5.synclist[rs.html5.currentsyncindex]) {
								if (rs.html5.synclist[rs.html5.currentsyncindex][0] * 1 - rs.html5.audioelement.currentTime * 1000 <= 20) {
									setTimeout("rs.html5.refresh()", 0);
								}
								else {
									var temptime = rs.html5.synclist[rs.html5.currentsyncindex][0] * 1 - rs.html5.audioelement.currentTime * 1000 -20;
									if (temptime > 75){
										 setTimeout("rs.html5.refresh()",75);
									}
									else if (temptime < 0) {
										 setTimeout("rs.html5.refresh()", 0);								
									} 
									else {
										 setTimeout("rs.html5.refresh()", temptime);
									}										 
								}
							}
							else {
								setTimeout("rs.html5.refresh()", 75);
							}
						}
						else {
							if (rs.html5.synclist[rs.html5.currentsyncindex]) {
								if (rs.html5.synclist[rs.html5.currentsyncindex][0] * 1 - rs.html5.audioelement.currentTime * 1000 <= 20) {
									setTimeout("rs.html5.refresh()", 0);
								} 
								else {
									var temptime = rs.html5.synclist[rs.html5.currentsyncindex][0] * 1 - rs.html5.audioelement.currentTime * 1000 -20;
									if (temptime > 75){
										 setTimeout("rs.html5.refresh()",75);
									}	 
									else if (temptime < 0) {
											 setTimeout("rs.html5.refresh()", 0);								
									}
									else {
											 setTimeout("rs.html5.refresh()", temptime);
									}											 
								}
							} 
							else {
								setTimeout("rs.html5.refresh()", 75);
							}
						}
					}
				}
			}
		}		
	},
	createStylesheet: function() {
		if (document.styleSheets['rsstylesheet'] || document.getElementById('rsstylesheet')) {
			return;
		}
		var css = document.createElement('style');                                  
		css.type='text/css';
		css.setAttribute('id', 'rsstylesheet');
		css.setAttribute('name', 'rsstylesheet'); 
		
		var bl = document.getElementsByTagName("head");
		var b = null;
		if (bl.length > 0) {
			b = bl.item(0);
		}
		if (b) {
			b.appendChild(css);
		} else {
			return;
		}
		
		var rs_playerarea_height=parseInt(rs.settings.flash.height)+19;
		var rs_popup_width=parseInt(rs.settings.flash.popupWidth)+35;
		changeCSSRule("#rs_playerarea", "position: relative !important; border:1px solid #aeaeae !important; background:#ffffff !important; width: "+rs.data.getPhrase("playerwidth")+"px !important; height: "+rs_playerarea_height+"px !important; line-height: normal !important; font-style: normal !important;font-family:Arial !important;");
		changeCSSRule("#rs_playerarea object", "max-width: none !important;");
		changeCSSRule("#closebr", "border-style: none !important; margin: 0px !important; padding: 0px !important; ");
		changeCSSRule("#rs_popup_player", "font-family: Arial !important; font-size: 13px !important; width: "+rs_popup_width+"px !important; height: "+rs.settings.flash.popupHeight+"px !important; position: absolute !important; border: 1px solid #aeaeae !important; z-index: 9000 !important; background: #fff !important; -moz-box-shadow: 2px 4px 6px #999 !important; -webkit-box-shadow: 2px 4px 6px #999 !important; -box-shadow: 2px 4px 6px #999 !important; line-height: normal !important;");
		changeCSSRule("#rs_popup_link a:hover", "background-color: #a4cbff !important;");
		changeCSSRule("#rs_selimg", "position: absolute !important; border: 1px solid #aeaeae !important; z-index: 10000 !important; background: #fff !important; padding: 5px !important; -moz-box-shadow: 2px 4px 6px #999 !important; -webkit-box-shadow: 2px 4px 6px #999 !important; -box-shadow: 2px 4px 6px #999 !important; line-height: normal !important;");	
		changeCSSRule("#rspopup", "position: absolute !important; z-index: 1000 !important; background: #fff !important; width: 342px !important; border-color: #a4cbff #aeaeae #aeaeae !important; border-right: 1px solid #aeaeae !important; border-style: solid !important; border-width: 1px !important; margin: 3px 3px 3px 0 !important; font-size: 12px !important; font-family: Arial !important; padding: 3px !important; -moz-box-shadow: 0 7px 6px #999 !important; -webkit-box-shadow: 0 7px 6px #999 !important; -box-shadow: 0 7px 6px #999 !important;");	
		changeCSSRule(".rs_block", "float: left !important; margin: 0 3px 0 0 !important; padding: 3px !important; border: 1px solid #ddd !important; width: 160px !important; background: none !important; clear: none !important; font-family: Arial !important;");
		changeCSSRule(".rs_block legend", "position: static !important; font-weight: bold !important; color: #000 !important; font-size: 12px !important; text-transform: none !important; letter-spacing: 0px !important; padding: 0px !important; font-style: inherit !important; font-family: Arial !important;");
		changeCSSRule(".rs_block ul", "margin: 0 !important; padding: 0 !important; list-style: none !important; width: 100% !important; font-family: Arial !important;");
		changeCSSRule(".rs_block li", "padding: 0 !important; margin: 0 !important; width: 100% !important; background: none !important; list-style-image: none !important; list-style-type: none !important; font-family: Arial !important;");		
		changeCSSRule(".rs_block li a", "text-align: left !important; border-style: none !important; display: block !important; padding: 5px 0 5px 20px !important; text-decoration: none !important; color: #000 !important; font-size: 12px !important; font-family: Arial !important; font-weight: normal !important; width: 87% !important;");
		changeCSSRule(".rs_block li a:hover", "background: #eee !important;");
		changeCSSRule(".rs_block li.rs_active", "background-color: #A4CBFF !important; background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0, rgb(144,192,240)), color-stop(0.79, rgb(229,237,255))) !important; background-image: -moz-linear-gradient(center bottom, rgb(144,192,240) 0%, rgb(229,237,255) 79%) !important;");
		changeCSSRule(".rs_block li.rs_active a", "background: transparent url("+rs.data.getImage("arrowSrc")+") no-repeat scroll 10px center !important;");
		changeCSSRule(".rs_block li.rs_active a:hover", "background: transparent url("+rs.data.getImage("arrowSrc")+") no-repeat scroll 10px center !important;");
		changeCSSRule("#bottomlinks", "font-family: Arial !important;color:#333 !important;font-size:11px !important; margin: 2px 0 2px 0 !important;");
		changeCSSRule("#bottomlinks a", "color: #000 !important; border-style: none !important; text-decoration: none !important; padding: 2px; font-weight: normal !important; font-size:11px !important; font-family: Arial !important;");
		changeCSSRule("#bottomlinks a:hover", "background-color: #a4cbff !important;");
		changeCSSRule("a.rs_settings", "padding-left: 17px !important; border-style: none !important; background: transparent url("+rs.data.getImage("settingsSrc")+") no-repeat 2px 2px !important;");
		changeCSSRule(".sync_word_highlighted", "background-color: "+rs.settings.wordColor+" !important; color: "+rs.settings.textColor+" !important;");
		changeCSSRule(".sync_sent_highlighted", "background-color: "+rs.settings.sentColor+" !important; color: "+rs.settings.textColor+" !important;");
		changeCSSRule("#timeline", "position: absolute !important; top: 4px !important; left: 55px !important; height: 11px !important; background-color: #F4F4F4 !important; width: 170px !important; border: 1px solid #3380CC !important;");
		changeCSSRule("#duration", "position: relative !important; height: 11px !important; background-color: #92C0EF !important; width: 0px;");
		changeCSSRule("#durationtxt", "position: absolute !important; top: 1px !important; left: 0px !important; text-align: center !important; font-size: 10px !important; font-weight: bold !important; font-family: Helvetica !important; color: #003399 !important; line-height: 80% !important; width: 100% !important;");
	},
	addEvents: function() {
		if (((navigator.userAgent.toLowerCase().indexOf('iphone') > -1 || navigator.userAgent.toLowerCase().indexOf('ipad') > -1 || navigator.userAgent.toLowerCase().indexOf('ipod') > -1) && navigator.vendor.toLowerCase().indexOf('apple') > -1) || navigator.userAgent.toLowerCase().indexOf('android') > -1) {
			document.addEventListener('touchstart', function(e) {
				setTimeout(function() {
					rs.getSelectedHTML();
					return false;
				}, 50);
			}, false);
		} else {
			document.addEventListener('mousedown', function(e) {
				setTimeout(function() {
					rs.popup.mousePress(e);
					return false;
				},0);
			}, false);
			document.addEventListener('keydown', function(e) {
				setTimeout(function() {
					rs.popup.mousePress(e);
					return false;
				},0);
			}, false);
			document.addEventListener('mouseup', function(e) {
				setTimeout(function() {
					rs.copyselected(e);
					return false;
				},0);
			}, false);
			document.addEventListener('keyup', function(e) {
				setTimeout(function() {
					rs.copyselected(e);
					return false;
				},0);
			}, false);			
		}
	}
};

if (document.addEventListener) // Most browsers including IE9, with Chrome Google Maps fix
{
	rs.addEvents();
	window.addEventListener("message", rs.html5.receiveMessage, false, true);
}
else if (document.attachEvent) // MSIE 4+
{
	document.attachEvent('onmousedown', rs.popup.mousePress);
	document.attachEvent('onkeydown', rs.popup.mousePress);
	document.attachEvent('onmouseup', rs.copyselected);
	document.attachEvent('onkeyup', rs.copyselected);
}
else {
	document.onmousedown = rs.popup.mousePress;
	document.onkeydown = rs.popup.mousePress;
	document.onmouseup = rs.copyselected;
	document.onkeyup = rs.copyselected;
}

/* Global functions called from the flash player */
function readpage(rscall,playerid) {
	rs.readpage(rscall,playerid);
};

function rshlsetContent(thecontent) {
	rs.rshlsetContent(thecontent);
};

function rshlsetId(theid) {
	rs.rshlsetId(theid);
};

function rshlinit() {
	rs.rshlinit();
};

function rshlsync(type,id) {
	var typearr = type.split(",");
	var idarr = id.split(",");
	for(var i=0; i < type.length; i++)  {
		rs.rshlsync(typearr[i],idarr[i]);
	}
};

function rshlexit() {
	rs.rshlexit();
};

function changeCSSRule(selector,rule) {
	if (document.styleSheets['rsstylesheet']) {
		css=document.styleSheets['rsstylesheet'];
	}
	else if (document.getElementById('rsstylesheet')) {
		css=document.getElementById('rsstylesheet');
	}
	if (css.addRule) {
		css.addRule(selector,rule); //index);
	}
	else if (css.sheet.insertRule) {
		css.sheet.insertRule(selector+" {"+rule+"}",css.sheet.cssRules.length); //index);
	}
};